function [AM, ErrorFlag] = getamquad(varargin);
%GETAMQUAD 
%  [QuadMonitor, ErrorFlag] = getamquad(Family, DeviceList)
%
%  INPUTS
%  1. Family - Family Name 
%              Data Structure
%              QMS Structure
%              Accelerator Object
%  2. DeviceList ([Sector Device #] or [element #]) {Default: whole family}
%  3. 'Physics'  - Use physics  units (optional override of units)
%     'Hardware' - Use hardware units (optional override of units)
%
%  OUTPUTS
%  1. QuadMonitor - Quadrupole monitor for the backleg power supply
% 
%  NOTES
%  1. If Family is a cell array, then DeviceList and Field can also be a cell arrays
%
%  Written by Greg Portmann


% Input parsing
UnitsFlag = {};
for i = length(varargin):-1:1
    if isstruct(varargin{i})
        % Ignor structures
    elseif iscell(varargin{i})
        % Ignor cells
    elseif strcmpi(varargin{i},'struct')
        % Remove and ignor
        varargin(i) = [];
    elseif strcmpi(varargin{i},'numeric')
        % Remove and ignor
        varargin(i) = [];
    elseif strcmpi(varargin{i},'simulator') | strcmpi(varargin{i},'model') | strcmpi(varargin{i},'Online') | strcmpi(varargin{i},'Manual')
        % Remove and ignor
        varargin(i) = [];
    elseif strcmpi(varargin{i},'physics')
        UnitsFlag = {'Physics'};
        varargin(i) = [];
    elseif strcmpi(varargin{i},'hardware')
        UnitsFlag = {'Hardware'};
        varargin(i) = [];
    end
end

if length(varargin) == 0
    error('Must have at least a family name input');
else
    Family = varargin{1};
    if length(varargin) >= 2
        DeviceList = varargin{2};
    end
end


%%%%%%%%%%%%%%%%%%%%%
% Cell Array Inputs %
%%%%%%%%%%%%%%%%%%%%%
if iscell(Family)
    for i = 1:length(Family)
        if length(varargin) < 2
            [QuadSetpoint{i}, ErrorFlag{i}] = getamquad(Family{i}, UnitsFlag{:});
        else
            if iscell(DeviceList)
                [QuadSetpoint{i}, ErrorFlag{i}] = getamquad(Family{i}, DeviceList{i}, UnitsFlag{:});
            else
                [QuadSetpoint{i}, ErrorFlag{i}] = getamquad(Family{i}, DeviceList, UnitsFlag{:});
            end
        end
    end
    return
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Family or data structure inputs beyond this point %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if isstruct(Family)
    % Data structure inputs
    if length(varargin) < 2
        if isfield(Family,'DeviceList')
            DeviceList = Family.DeviceList;
        else
            if isfield(Family,'QuadDev')
                QuadDev = Family.QuadDev;
            else
                error('For data structure inputs, DeviceList or QuadDev field must exist or DeviceList must be input.')
            end
        end
    end
    if isempty(UnitsFlag)
        if isfield(Family,'Units')
            UnitsFlag{1} = Family.Units; 
        end
    end
    if isfield(Family,'FamilyName')
        Family = Family.FamilyName;
    else
        if isfield(Family,'QuadFamily')
            Family = Family.QuadFamily;
        else
            error('For data structure inputs FamilyName or QuadFamily field must exist')
        end
    end
else
    % Family string input
    if length(varargin) < 2
        DeviceList = [];
    end
end
if isempty(DeviceList)
    DeviceList = family2dev(Family);
end
if (size(DeviceList,2) == 1) 
    DeviceList = elem2dev(Family, DeviceList);
end

if isempty(UnitsFlag)
    UnitsFlag = '';
else
    UnitsFlag = UnitsFlag{1};    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% CommonName Input:  Convert common names to a DeviceList %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if isstr(DeviceList)
    DeviceList = common2dev(DeviceList, Family);
    if isempty(DeviceList)
        error('DeviceList was a string but common names could not be found.');
    end
end


Mode = getfamilydata(Family, 'Setpoint', 'Mode', DeviceList);
Machine = getfamilydata('Machine'); 

if strcmpi(Mode,'Simulator')
    [AM, t, ErrorFlag] = getam(Family, DeviceList);
    
elseif strcmpi(Machine,'SPEAR3') | strcmpi(Machine,'SPEAR')
    ErrorFlag = 0;

    for i = 1:size(DeviceList,1)
        QMSChannelSelect = getpv('118-QMS1:ChanSelect');    
        FamilyDeviceChannelTbl = { ...
                'QDX' [ 1  1] 81;...
                'QFX' [ 1  1] 82;...
                'QDY' [ 1  1] 83;...
                'QFY' [ 1  1] 84;...
                'QDZ' [ 1  1] 85;...
                'QFZ' [ 1  1] 86;...
                'QF'  [ 2  1] 87;...
                'QD'  [ 2  1] 88;...
                'QFC' [ 2  1] 89;...
                'QD'  [ 2  2] 90;...
                'QF'  [ 2  2] 91;...
                'QF'  [ 3  1] 92;...
                'QD'  [ 3  1] 93;...
                'QFC' [ 3  1] 94;...
                'QD'  [ 3  2] 95;...
                'QF'  [ 3  2] 96;...
                'QF'  [ 4  1] 65;...
                'QD'  [ 4  1] 66;...
                'QFC' [ 4  1] 67;...
                'QD'  [ 4  2] 68;...
                'QF'  [ 4  2] 69;...
                'QF'  [ 5  1] 70;...
                'QD'  [ 5  1] 71;...
                'QFC' [ 5  1] 72;...
                'QD'  [ 5  2] 73;...
                'QF'  [ 5  2] 74;...
                'QF'  [ 6  1] 75;...
                'QD'  [ 6  1] 76;...
                'QFC' [ 6  1] 77;...
                'QD'  [ 6  2] 78;...
                'QF'  [ 6  2] 79;...
                'QF'  [ 7  1] 49;...
                'QD'  [ 7  1] 50;...
                'QFC' [ 7  1] 51;...
                'QD'  [ 7  2] 52;...
                'QF'  [ 7  2] 53;...
                'QF'  [ 8  1] 54;...
                'QD'  [ 8  1] 55;...
                'QFC' [ 8  1] 56;...
                'QD'  [ 8  2] 57;...
                'QF'  [ 8  2] 58;...
                'QFZ' [ 9  1] 59;...
                'QDZ' [ 9  1] 60;...
                'QFY' [ 9  1] 61;...
                'QDY' [ 9  1] 62;...
                'QFX' [ 9  1] 63;...
                'QDX' [ 9  1] 64;...
                'QDX' [10   1] 33;...
                'QFX' [10   1] 34;...
                'QDY' [10   1] 35;...
                'QFY' [10   1] 36;...
                'QDZ' [10   1] 37;...
                'QFZ' [10   1] 38;...
                'QF'  [11   1] 39;...
                'QD'  [11   1] 40;...
                'QFC' [11   1] 41;...
                'QD'  [11   2] 42;...
                'QF'  [11   2] 43;...
                'QF'  [12   1] 44;...
                'QD'  [12   1] 45;...
                'QFC' [12   1] 46;...
                'QD'  [12   2] 47;...
                'QF'  [12   2] 48;...
                'QF'  [13   1] 17;...
                'QD'  [13   1] 18;...
                'QFC' [13   1] 19;...
                'QD'  [13   2] 20;...
                'QF'  [13   2] 21;...
                'QF'  [14   1] 22;...
                'QD'  [14   1] 23;...
                'QFC' [14   1] 24;...
                'QD'  [14   2] 25;...
                'QF'  [14   2] 26;...
                'QF'  [15   1] 27;...
                'QD'  [15   1] 28;...
                'QFC' [15   1] 29;...
                'QD'  [15   2] 30;...
                'QF'  [15   2] 31;...
                'QF'  [16   1] 1 ;...
                'QD'  [16   1] 2;...
                'QFC' [16   1] 3;...
                'QD'  [16   2] 4;...
                'QF'  [16   2] 5;...
                'QF'  [17   1] 6;...
                'QD'  [17   1] 7;...
                'QFC' [17   1] 8;...
                'QD'  [17   2] 9;...
                'QF'  [17   2] 10;...
                'QFZ' [18   1] 11;...
                'QDZ' [18   1] 12;...
                'QFY' [18   1] 13;...
                'QDY' [18   1] 14;...
                'QFX' [18   1] 15;...
                'QDX' [18   1] 16};
        
        TblRowMatch = find(QMSChannelSelect==cell2mat(FamilyDeviceChannelTbl(:,3)));
        if isempty(TblRowMatch)
            AM(i,1) = 0;
        else            
            TblRowMatch = TblRowMatch(1);
            Family111 = FamilyDeviceChannelTbl{TblRowMatch,1};
            Device = FamilyDeviceChannelTbl{TblRowMatch,2};
            
            if ~strcmpi(Family, Family111)
                %error('Required quad does not match the presenly selected quad (use setquad first).');
                AM(i,1) = 0;
            elseif any(DeviceList(i,:) ~= Device)
                %error('Required quad device does not match the presenly selected quad device (use setquad first).');
                AM(i,1) = 0;
            else
                %AM = getpv('118-QMS1:CurrSetpt');
                [tmp, t, ErrorFlag] = getpv('118-QMS1:Curr1');
                AM(i,1) = tmp(1);    
            end
        end
    end
    
else
    
    [AM, t, ErrorFlag] = getam(Family, QuadDev);
    
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Change to physics units if requested %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if strcmpi(UnitsFlag,'Physics')
    % Scale factor for backleg windings?
    AM = hw2physics(Family, 'QMS', AM, DeviceList);
end
