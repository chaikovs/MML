function pep2_her
% function pep2_her
% Lattice definition file
% Compiled by Christoph Steier from the MAD
% lattice file of Yury Nosochkov, Martin Donald
% 07/14/2003 
%
% Lattice of the PEP-II HER
%
% File header of original MAD-file:	her-nov02.50-1.25.mad
% DATE AND TIME:    			November 2002
%
% Modifications :
%

global FAMLIST THERING GLOBVAL
GLOBVAL.E0 = 9.0e9;
GLOBVAL.LatticeFile = 'pep2_her';
FAMLIST = cell(0);
disp(' ');
disp('** Loading PEP-II HER lattice in pep2_her.m **');


L0 =  2199.317915;	% design length [m]
C0 =   299792458; 				% speed of light [m/s]
HarmNumber = 3492;

% Element definitions:

B = sbend('B', 5.40000000000000e+000, 3.27249234750000e-002, 1.63624617370000e-002, 1.63624617370000e-002, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
DBQ = drift('DBQ', 8.20818574167000e-001,  'DriftPass');
QF = quadrupole('QF', 2.79178000000000e-001, 2.41501926239000e-001, 'StrMPoleSymplectic4RadPass');
QD = quadrupole('QD', 2.79178000000000e-001, -2.41149561344000e-001, 'StrMPoleSymplectic4RadPass');
QF90 = quadrupole('QF90', 2.79178000000000e-001, 2.41501926239000e-001, 'StrMPoleSymplectic4RadPass');
QD90 = quadrupole('QD90', 2.79178000000000e-001, -2.41149561344000e-001, 'StrMPoleSymplectic4RadPass');
DFD = drift('DFD', 7.25956250000000e+000,  'DriftPass');
QFO = quadrupole('QFO', 2.25000000000000e-001, 2.94025169749000e-001, 'StrMPoleSymplectic4RadPass');
QDO = quadrupole('QDO', 2.25000000000000e-001, -2.94025169749000e-001, 'StrMPoleSymplectic4RadPass');
QFO90 = quadrupole('QFO90', 2.25000000000000e-001, 4.15822208643000e-001, 'StrMPoleSymplectic4RadPass');
QDO90 = quadrupole('QDO90', 2.25000000000000e-001, -4.15822208643000e-001, 'StrMPoleSymplectic4RadPass');
DBQ56 = drift('DBQ56', 8.20818574167000e-001,  'DriftPass');
QFS1 = quadrupole('QFS1', 2.79178000000000e-001, 3.08853553905000e-001, 'StrMPoleSymplectic4RadPass');
QFS2 = quadrupole('QFS2', 2.79178000000000e-001, 3.13614628565000e-001, 'StrMPoleSymplectic4RadPass');
QFS3 = quadrupole('QFS3', 2.79178000000000e-001, 2.45236962401000e-001, 'StrMPoleSymplectic4RadPass');
QDS0 = quadrupole('QDS0', 2.79178000000000e-001, -2.31664603226000e-001, 'StrMPoleSymplectic4RadPass');
QDS1 = quadrupole('QDS1', 2.79178000000000e-001, -2.60215903816000e-001, 'StrMPoleSymplectic4RadPass');
QDS2 = quadrupole('QDS2', 2.79178000000000e-001, -2.35378042647000e-001, 'StrMPoleSymplectic4RadPass');
QDS3 = quadrupole('QDS3', 2.79178000000000e-001, -2.41149561344000e-001, 'StrMPoleSymplectic4RadPass');
DNDO = drift('DNDO', 7.20538450000000e+000,  'DriftPass');
QDS0XE = quadrupole('QDS0XE', 2.79178000000000e-001, -2.63064845388000e-001, 'StrMPoleSymplectic4RadPass');
QFS1E = quadrupole('QFS1E', 2.79178000000000e-001, 2.67123930257000e-001, 'StrMPoleSymplectic4RadPass');
QFS2E = quadrupole('QFS2E', 2.79178000000000e-001, 2.84460191985000e-001, 'StrMPoleSymplectic4RadPass');
QFS3E = quadrupole('QFS3E', 2.79178000000000e-001, 2.63649730432000e-001, 'StrMPoleSymplectic4RadPass');
QDS0E = quadrupole('QDS0E', 2.79178000000000e-001, -2.31009658373000e-001, 'StrMPoleSymplectic4RadPass');
QDS1E = quadrupole('QDS1E', 2.79178000000000e-001, -2.43169110474000e-001, 'StrMPoleSymplectic4RadPass');
QDS2E = quadrupole('QDS2E', 2.79178000000000e-001, -2.40182936972000e-001, 'StrMPoleSymplectic4RadPass');
QDS3E = quadrupole('QDS3E', 2.79178000000000e-001, -2.41149561344000e-001, 'StrMPoleSymplectic4RadPass');
QFS1SR01 = quadrupole('QFS1SR01', 2.79178000000000e-001, 3.08851556509000e-001, 'StrMPoleSymplectic4RadPass');
QFS2SR01 = quadrupole('QFS2SR01', 2.79178000000000e-001, 3.13613951039000e-001, 'StrMPoleSymplectic4RadPass');
QFS3SR01 = quadrupole('QFS3SR01', 2.79178000000000e-001, 2.45237213072000e-001, 'StrMPoleSymplectic4RadPass');
QFS1SR03 = quadrupole('QFS1SR03', 2.79178000000000e-001, 3.08851556509000e-001, 'StrMPoleSymplectic4RadPass');
QFS2SR03 = quadrupole('QFS2SR03', 2.79178000000000e-001, 3.13613951039000e-001, 'StrMPoleSymplectic4RadPass');
QFS3SR03 = quadrupole('QFS3SR03', 2.79178000000000e-001, 2.45237213072000e-001, 'StrMPoleSymplectic4RadPass');
QDS0XSR1 = quadrupole('QDS0XSR1', 2.79178000000000e-001, -2.63713389382000e-001, 'StrMPoleSymplectic4RadPass');
QDS0XSR4 = quadrupole('QDS0XSR4', 2.79178000000000e-001, -2.63713389382000e-001, 'StrMPoleSymplectic4RadPass');
QDS0S = quadrupole('QDS0S', 2.79178000000000e-001, -2.31664608858000e-001, 'StrMPoleSymplectic4RadPass');
QDS1SR01 = quadrupole('QDS1SR01', 2.79178000000000e-001, -2.60210211815000e-001, 'StrMPoleSymplectic4RadPass');
QDS2SR01 = quadrupole('QDS2SR01', 2.79178000000000e-001, -3.29170296189000e-001, 'StrMPoleSymplectic4RadPass');
QDS1SR03 = quadrupole('QDS1SR03', 2.79178000000000e-001, -2.60210211815000e-001, 'StrMPoleSymplectic4RadPass');
QDS2SR03 = quadrupole('QDS2SR03', 2.79178000000000e-001, -3.29170296189000e-001, 'StrMPoleSymplectic4RadPass');
QDS3S = quadrupole('QDS3S', 2.79178000000000e-001, -2.41149561344000e-001, 'StrMPoleSymplectic4RadPass');
BR = sbend('BR', 5.40000000000000e+000, 3.40090738350000e-002, 1.70045369170000e-002, 1.70045369170000e-002, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
QFS1R = quadrupole('QFS1R', 2.79178000000000e-001, 2.65369959867000e-001, 'StrMPoleSymplectic4RadPass');
QFS2R = quadrupole('QFS2R', 2.79178000000000e-001, 3.15836908826000e-001, 'StrMPoleSymplectic4RadPass');
QFS3R = quadrupole('QFS3R', 2.79178000000000e-001, 2.38807123635000e-001, 'StrMPoleSymplectic4RadPass');
QDS0R = quadrupole('QDS0R', 2.79178000000000e-001, -2.06766669111000e-001, 'StrMPoleSymplectic4RadPass');
QDS1R = quadrupole('QDS1R', 2.79178000000000e-001, -2.55699917090000e-001, 'StrMPoleSymplectic4RadPass');
QDS2R = quadrupole('QDS2R', 2.79178000000000e-001, -1.37467956711000e-001, 'StrMPoleSymplectic4RadPass');
QDS3R = quadrupole('QDS3R', 2.79178000000000e-001, -2.60879491846000e-001, 'StrMPoleSymplectic4RadPass');
DSC9R = drift('DSC9R', 8.20783145596000e-001,  'DriftPass');
DSC8R = drift('DSC8R', 8.20690378486000e-001,  'DriftPass');
DSC7R = drift('DSC7R', 8.20633647269000e-001,  'DriftPass');
DSC6R = drift('DSC6R', 8.20530687944000e-001,  'DriftPass');
DSC5R = drift('DSC5R', 8.20473956727000e-001,  'DriftPass');
DSC4R = drift('DSC4R', 8.20371004113000e-001,  'DriftPass');
DSC3R = drift('DSC3R', 8.20314272896000e-001,  'DriftPass');
DSC2R = drift('DSC2R', 8.20207897579000e-001,  'DriftPass');
DSC1R = drift('DSC1R', 8.20128859319000e-001,  'DriftPass');
DNDOIR = drift('DNDOIR', 7.25956250000000e+000,  'DriftPass');
BL = sbend('BL', 5.40000000000000e+000, 3.14407731150000e-002, 1.57203865570000e-002, 1.57203865570000e-002, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
QFS1L = quadrupole('QFS1L', 2.79178000000000e-001, 2.51044283635000e-001, 'StrMPoleSymplectic4RadPass');
QFS2L = quadrupole('QFS2L', 2.79178000000000e-001, 3.02519105339000e-001, 'StrMPoleSymplectic4RadPass');
QFS3L = quadrupole('QFS3L', 2.79178000000000e-001, 2.47638466027000e-001, 'StrMPoleSymplectic4RadPass');
QDS0L = quadrupole('QDS0L', 2.79178000000000e-001, -2.11754257492000e-001, 'StrMPoleSymplectic4RadPass');
QDS1L = quadrupole('QDS1L', 2.79178000000000e-001, -2.44193642953000e-001, 'StrMPoleSymplectic4RadPass');
QDS2L = quadrupole('QDS2L', 2.79178000000000e-001, -1.44348412637000e-001, 'StrMPoleSymplectic4RadPass');
QDS3L = quadrupole('QDS3L', 2.79178000000000e-001, -2.55036997641000e-001, 'StrMPoleSymplectic4RadPass');
DSC9L = drift('DSC9L', 8.20858784871000e-001,  'DriftPass');
DSC8L = drift('DSC8L', 8.20953043410000e-001,  'DriftPass');
DSC7L = drift('DSC7L', 8.21009774627000e-001,  'DriftPass');
DSC6L = drift('DSC6L', 8.21112754088000e-001,  'DriftPass');
DSC5L = drift('DSC5L', 8.21169485305000e-001,  'DriftPass');
DSC4L = drift('DSC4L', 8.21272471478000e-001,  'DriftPass');
DSC3L = drift('DSC3L', 8.21329202695000e-001,  'DriftPass');
DSC2L = drift('DSC2L', 8.21438222768000e-001,  'DriftPass');
DSC1L = drift('DSC1L', 8.21529381558000e-001,  'DriftPass');
YAN1L = marker('YAN1L', 'IdentityPass');
YAN2L = marker('YAN2L', 'IdentityPass');
YAN3L = marker('YAN3L', 'IdentityPass');
YAN1R = marker('YAN1R', 'IdentityPass');
YAN2R = marker('YAN2R', 'IdentityPass');
YAN3R = marker('YAN3R', 'IdentityPass');
B1A = multipole('B1A', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-2.35985968162153e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1B = multipole('B1B', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1C = multipole('B1C', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-6.67658252057911e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1D = multipole('B1D', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-6.39226838542923e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1E = multipole('B1E', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-8.18245259919981e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1F = multipole('B1F', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-9.58622091657886e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1G = multipole('B1G', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-2.14612666142231e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1H = multipole('B1H', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-2.40762934324862e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1I = multipole('B1I', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-2.36478151011216e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1J = multipole('B1J', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-2.42893981341547e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1K = multipole('B1K', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-2.43941178892743e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1P1 = multipole('B1P1', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-1.31601316258876e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1L = multipole('B1L', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-8.77342108392510e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1M = multipole('B1M', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-1.90684202097388e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
VKQD1AAR = corrector('VKQD1AAR', 0.00000000000000e+000, [0.00000000000000e+000 7.05000000000000e-006],  'CorrectorPass');
VKQD1ABR = corrector('VKQD1ABR', 0.00000000000000e+000, [0.00000000000000e+000 7.15000000000000e-006],  'CorrectorPass');
VKQD1ACR = corrector('VKQD1ACR', 0.00000000000000e+000, [0.00000000000000e+000 7.25000000000000e-006],  'CorrectorPass');
VKQD1ADR = corrector('VKQD1ADR', 0.00000000000000e+000, [0.00000000000000e+000 7.35000000000000e-006],  'CorrectorPass');
VKQD1AER = corrector('VKQD1AER', 0.00000000000000e+000, [0.00000000000000e+000 7.45000000000000e-006],  'CorrectorPass');
VKQD1AFR = corrector('VKQD1AFR', 0.00000000000000e+000, [0.00000000000000e+000 7.55000000000000e-006],  'CorrectorPass');
VKQD1AGR = corrector('VKQD1AGR', 0.00000000000000e+000, [0.00000000000000e+000 7.65000000000000e-006],  'CorrectorPass');
VKQD1P2R = corrector('VKQD1P2R', 0.00000000000000e+000, [0.00000000000000e+000 1.55000000000000e-006],  'CorrectorPass');
VKQD1AHR = corrector('VKQD1AHR', 0.00000000000000e+000, [0.00000000000000e+000 6.35000000000000e-006],  'CorrectorPass');
VKQD1AIR = corrector('VKQD1AIR', 0.00000000000000e+000, [0.00000000000000e+000 7.85000000000000e-006],  'CorrectorPass');
VKQD1AJR = corrector('VKQD1AJR', 0.00000000000000e+000, [0.00000000000000e+000 7.95000000000000e-006],  'CorrectorPass');
VKQD1AKR = corrector('VKQD1AKR', 0.00000000000000e+000, [0.00000000000000e+000 8.05000000000000e-006],  'CorrectorPass');
VKQD1ALR = corrector('VKQD1ALR', 0.00000000000000e+000, [0.00000000000000e+000 8.15000000000000e-006],  'CorrectorPass');
VKQD1AMR = corrector('VKQD1AMR', 0.00000000000000e+000, [0.00000000000000e+000 8.25000000000000e-006],  'CorrectorPass');
VKQD1ANR = corrector('VKQD1ANR', 0.00000000000000e+000, [0.00000000000000e+000 8.35000000000000e-006],  'CorrectorPass');
VKQD1AOR = corrector('VKQD1AOR', 0.00000000000000e+000, [0.00000000000000e+000 8.45000000000000e-006],  'CorrectorPass');
VKQD1APR = corrector('VKQD1APR', 0.00000000000000e+000, [0.00000000000000e+000 8.55000000000000e-006],  'CorrectorPass');
VKQD1BAR = corrector('VKQD1BAR', 0.00000000000000e+000, [0.00000000000000e+000 7.55000000000000e-006],  'CorrectorPass');
VKQD1BBR = corrector('VKQD1BBR', 0.00000000000000e+000, [0.00000000000000e+000 7.65000000000000e-006],  'CorrectorPass');
VKQD1BCR = corrector('VKQD1BCR', 0.00000000000000e+000, [0.00000000000000e+000 7.75000000000000e-006],  'CorrectorPass');
VKQD1P3R = corrector('VKQD1P3R', 0.00000000000000e+000, [0.00000000000000e+000 6.25000000000000e-006],  'CorrectorPass');
VKQD1BDR = corrector('VKQD1BDR', 0.00000000000000e+000, [0.00000000000000e+000 1.65000000000000e-006],  'CorrectorPass');
VKQD1BER = corrector('VKQD1BER', 0.00000000000000e+000, [0.00000000000000e+000 7.95000000000000e-006],  'CorrectorPass');
VKQD1BFR = corrector('VKQD1BFR', 0.00000000000000e+000, [0.00000000000000e+000 -1.80000000000000e-004],  'CorrectorPass');
VKQD1BGR = corrector('VKQD1BGR', 0.00000000000000e+000, [0.00000000000000e+000 1.85000000000000e-004],  'CorrectorPass');
VKQD1AAL = corrector('VKQD1AAL', 0.00000000000000e+000, [0.00000000000000e+000 3.24000000000000e-006],  'CorrectorPass');
VKQD1ABL = corrector('VKQD1ABL', 0.00000000000000e+000, [0.00000000000000e+000 3.14000000000000e-006],  'CorrectorPass');
VKQD1ACL = corrector('VKQD1ACL', 0.00000000000000e+000, [0.00000000000000e+000 3.04000000000000e-006],  'CorrectorPass');
VKQD1ADL = corrector('VKQD1ADL', 0.00000000000000e+000, [0.00000000000000e+000 2.94000000000000e-006],  'CorrectorPass');
VKQD1AEL = corrector('VKQD1AEL', 0.00000000000000e+000, [0.00000000000000e+000 2.84000000000000e-006],  'CorrectorPass');
VKQD1AFL = corrector('VKQD1AFL', 0.00000000000000e+000, [0.00000000000000e+000 2.74000000000000e-006],  'CorrectorPass');
VKQD1AGL = corrector('VKQD1AGL', 0.00000000000000e+000, [0.00000000000000e+000 2.64000000000000e-006],  'CorrectorPass');
VKQD1P2L = corrector('VKQD1P2L', 0.00000000000000e+000, [0.00000000000000e+000 5.40000000000000e-007],  'CorrectorPass');
VKQD1AHL = corrector('VKQD1AHL', 0.00000000000000e+000, [0.00000000000000e+000 2.04000000000000e-006],  'CorrectorPass');
VKQD1AIL = corrector('VKQD1AIL', 0.00000000000000e+000, [0.00000000000000e+000 2.44000000000000e-006],  'CorrectorPass');
VKQD1AJL = corrector('VKQD1AJL', 0.00000000000000e+000, [0.00000000000000e+000 2.34000000000000e-006],  'CorrectorPass');
VKQD1AKL = corrector('VKQD1AKL', 0.00000000000000e+000, [0.00000000000000e+000 2.24000000000000e-006],  'CorrectorPass');
VKQD1ALL = corrector('VKQD1ALL', 0.00000000000000e+000, [0.00000000000000e+000 2.14000000000000e-006],  'CorrectorPass');
VKQD1AML = corrector('VKQD1AML', 0.00000000000000e+000, [0.00000000000000e+000 2.04000000000000e-006],  'CorrectorPass');
VKQD1ANL = corrector('VKQD1ANL', 0.00000000000000e+000, [0.00000000000000e+000 1.94000000000000e-006],  'CorrectorPass');
VKQD1AOL = corrector('VKQD1AOL', 0.00000000000000e+000, [0.00000000000000e+000 1.84000000000000e-006],  'CorrectorPass');
VKQD1APL = corrector('VKQD1APL', 0.00000000000000e+000, [0.00000000000000e+000 1.74000000000000e-006],  'CorrectorPass');
VKQD1BAL = corrector('VKQD1BAL', 0.00000000000000e+000, [0.00000000000000e+000 1.44000000000000e-006],  'CorrectorPass');
VKQD1BBL = corrector('VKQD1BBL', 0.00000000000000e+000, [0.00000000000000e+000 1.34000000000000e-006],  'CorrectorPass');
VKQD1BCL = corrector('VKQD1BCL', 0.00000000000000e+000, [0.00000000000000e+000 1.24000000000000e-006],  'CorrectorPass');
VKQD1P3L = corrector('VKQD1P3L', 0.00000000000000e+000, [0.00000000000000e+000 9.40000000000000e-007],  'CorrectorPass');
VKQD1BDL = corrector('VKQD1BDL', 0.00000000000000e+000, [0.00000000000000e+000 2.40000000000000e-007],  'CorrectorPass');
VKQD1BEL = corrector('VKQD1BEL', 0.00000000000000e+000, [0.00000000000000e+000 1.04000000000000e-006],  'CorrectorPass');
VKQD1BFL = corrector('VKQD1BFL', 0.00000000000000e+000, [0.00000000000000e+000 -1.80000000000000e-004],  'CorrectorPass');
VKQD1BGL = corrector('VKQD1BGL', 0.00000000000000e+000, [0.00000000000000e+000 1.85000000000000e-004],  'CorrectorPass');
QD4RA = sbend('QD4RA', 9.37510000000000e-002, -5.87690000000000e-004, -1.50908000000000e-002, 1.45031100000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RB = sbend('QD4RB', 9.37500000000000e-002, -5.53940000000000e-004, -1.45031100000000e-002, 1.39491700000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RC = sbend('QD4RC', 9.37500000000000e-002, -5.21470000000000e-004, -1.39491700000000e-002, 1.34277000000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RD = sbend('QD4RD', 9.37500000000000e-002, -4.90210000000000e-004, -1.34277000000000e-002, 1.29374900000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RE = sbend('QD4RE', 9.37500000000000e-002, -4.60100000000000e-004, -1.29374900000000e-002, 1.24773900000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RF = sbend('QD4RF', 9.37500000000000e-002, -4.31060000000000e-004, -1.24773900000000e-002, 1.20463300000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RG = sbend('QD4RG', 9.37500000000000e-002, -4.03020000000000e-004, -1.20463300000000e-002, 1.16433100000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RH = sbend('QD4RH', 9.37500000000000e-002, -3.75920000000000e-004, -1.16433100000000e-002, 1.12673900000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RI = sbend('QD4RI', 9.37500000000000e-002, -3.49690000000000e-004, -1.12673900000000e-002, 1.09177000000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RJ = sbend('QD4RJ', 9.37500000000000e-002, -3.24290000000000e-004, -1.09177000000000e-002, 1.05934100000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RK = sbend('QD4RK', 9.37500000000000e-002, -2.99620000000000e-004, -1.05934100000000e-002, 1.02937900000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RL = sbend('QD4RL', 9.37500000000000e-002, -2.75660000000000e-004, -1.02937900000000e-002, 1.00181300000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RM = sbend('QD4RM', 9.37500000000000e-002, -2.52350000000000e-004, -1.00181300000000e-002, 9.76578000000000e-003, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RN = sbend('QD4RN', 9.37500000000000e-002, -2.29610000000000e-004, -9.76578000000000e-003, 9.53617000000000e-003, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RO = sbend('QD4RO', 9.37500000000000e-002, -2.07420000000000e-004, -9.53617000000000e-003, 9.32875000000000e-003, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4RP = sbend('QD4RP', 9.37500000000000e-002, -1.85700000000000e-004, -9.32875000000000e-003, 9.14305000000000e-003, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
VKQD4AAR = corrector('VKQD4AAR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4ABR = corrector('VKQD4ABR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4ACR = corrector('VKQD4ACR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4ADR = corrector('VKQD4ADR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AER = corrector('VKQD4AER', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AFR = corrector('VKQD4AFR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AGR = corrector('VKQD4AGR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AHR = corrector('VKQD4AHR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AIR = corrector('VKQD4AIR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AJR = corrector('VKQD4AJR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AKR = corrector('VKQD4AKR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4ALR = corrector('VKQD4ALR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AMR = corrector('VKQD4AMR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4ANR = corrector('VKQD4ANR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AOR = corrector('VKQD4AOR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4APR = corrector('VKQD4APR', 0.00000000000000e+000, [0.00000000000000e+000 3.72000000000000e-005],  'CorrectorPass');
VKQD4AAL = corrector('VKQD4AAL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4ABL = corrector('VKQD4ABL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4ACL = corrector('VKQD4ACL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4ADL = corrector('VKQD4ADL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4AEL = corrector('VKQD4AEL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4AFL = corrector('VKQD4AFL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4AGL = corrector('VKQD4AGL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4AHL = corrector('VKQD4AHL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4AIL = corrector('VKQD4AIL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4AJL = corrector('VKQD4AJL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4AKL = corrector('VKQD4AKL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4ALL = corrector('VKQD4ALL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4AML = corrector('VKQD4AML', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4ANL = corrector('VKQD4ANL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4AOL = corrector('VKQD4AOL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
VKQD4APL = corrector('VKQD4APL', 0.00000000000000e+000, [0.00000000000000e+000 2.48000000000000e-005],  'CorrectorPass');
DBH1 = drift('DBH1', 2.80002000000000e-001,  'DriftPass');
DSTAR = drift('DSTAR', 2.10030000000000e-001,  'DriftPass');
D1 = drift('D1', 1.02502000000000e-001,  'DriftPass');
D1A = drift('D1A', 2.09330000000000e-002,  'DriftPass');
D1B = drift('D1B', 1.84071000000000e-001,  'DriftPass');
D2 = drift('D2', 7.50006000000000e-001,  'DriftPass');
DQF5 = drift('DQF5', 7.35001000000000e-001,  'DriftPass');
QF5AR = sbend('QF5AR', 3.82501000000000e-001, 0.00000000000000e+000, -2.77050000000000e-004, 2.06890000000000e-004, 2.05887362286000e-001, 'BndMPoleSymplectic4RadPass');
QF5BR = sbend('QF5BR', 3.82501000000000e-001, 0.00000000000000e+000, -2.06890000000000e-004, 1.30510000000000e-004, 2.05887362286000e-001, 'BndMPoleSymplectic4RadPass');
QF5CR = sbend('QF5CR', 3.82501000000000e-001, 0.00000000000000e+000, -1.30510000000000e-004, 5.02100000000000e-005, 2.05887362286000e-001, 'BndMPoleSymplectic4RadPass');
QF5DR = sbend('QF5DR', 3.82501000000000e-001, 0.00000000000000e+000, -5.02100000000000e-005, -3.15900000000000e-005, 2.05887362286000e-001, 'BndMPoleSymplectic4RadPass');
B1AL = multipole('B1AL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [2.35985968162153e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1BL = multipole('B1BL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1CL = multipole('B1CL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [6.67658252057911e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1DL = multipole('B1DL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [6.39226838542923e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1EL = multipole('B1EL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [8.18245259919981e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1FL = multipole('B1FL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [9.58622091657886e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1GL = multipole('B1GL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [2.14612666142231e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1HL = multipole('B1HL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [2.40762934324862e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1IL = multipole('B1IL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [2.36478151011216e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1JL = multipole('B1JL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [2.42893981341547e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1KL = multipole('B1KL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [2.43941178892743e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1P1L = multipole('B1P1L', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [1.31601316258876e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1LL = multipole('B1LL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [8.77342108392510e-009 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
B1ML = multipole('B1ML', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [1.90684202097388e-008 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
QD4LA = sbend('QD4LA', 9.37510000000000e-002, 5.87690000000000e-004, -1.45031100000000e-002, 1.50908000000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LB = sbend('QD4LB', 9.37500000000000e-002, 5.53940000000000e-004, -1.39491700000000e-002, 1.45031100000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LC = sbend('QD4LC', 9.37500000000000e-002, 5.21470000000000e-004, -1.34277000000000e-002, 1.39491700000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LD = sbend('QD4LD', 9.37500000000000e-002, 4.90210000000000e-004, -1.29374900000000e-002, 1.34277000000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LE = sbend('QD4LE', 9.37500000000000e-002, 4.60100000000000e-004, -1.24773900000000e-002, 1.29374900000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LF = sbend('QD4LF', 9.37500000000000e-002, 4.31060000000000e-004, -1.20463300000000e-002, 1.24773900000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LG = sbend('QD4LG', 9.37500000000000e-002, 4.03020000000000e-004, -1.16433100000000e-002, 1.20463300000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LH = sbend('QD4LH', 9.37500000000000e-002, 3.75920000000000e-004, -1.12673900000000e-002, 1.16433100000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LI = sbend('QD4LI', 9.37500000000000e-002, 3.49690000000000e-004, -1.09177000000000e-002, 1.12673900000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LJ = sbend('QD4LJ', 9.37500000000000e-002, 3.24290000000000e-004, -1.05934100000000e-002, 1.09177000000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LK = sbend('QD4LK', 9.37500000000000e-002, 2.99620000000000e-004, -1.02937900000000e-002, 1.05934100000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LL = sbend('QD4LL', 9.37500000000000e-002, 2.75660000000000e-004, -1.00181300000000e-002, 1.02937900000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LM = sbend('QD4LM', 9.37500000000000e-002, 2.52350000000000e-004, -9.76578000000000e-003, 1.00181300000000e-002, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LN = sbend('QD4LN', 9.37500000000000e-002, 2.29610000000000e-004, -9.53617000000000e-003, 9.76578000000000e-003, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LO = sbend('QD4LO', 9.37500000000000e-002, 2.07420000000000e-004, -9.32875000000000e-003, 9.53617000000000e-003, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QD4LP = sbend('QD4LP', 9.37500000000000e-002, 1.85700000000000e-004, -9.14305000000000e-003, 9.32875000000000e-003, -2.64772345753000e-001, 'BndMPoleSymplectic4RadPass');
QF5AL = sbend('QF5AL', 3.82501000000000e-001, 0.00000000000000e+000, -2.06890000000000e-004, 2.77050000000000e-004, 2.05887362286000e-001, 'BndMPoleSymplectic4RadPass');
QF5BL = sbend('QF5BL', 3.82501000000000e-001, 0.00000000000000e+000, -1.30510000000000e-004, 2.06890000000000e-004, 2.05887362286000e-001, 'BndMPoleSymplectic4RadPass');
QF5CL = sbend('QF5CL', 3.82501000000000e-001, 0.00000000000000e+000, -5.02100000000000e-005, 1.30510000000000e-004, 2.05887362286000e-001, 'BndMPoleSymplectic4RadPass');
QF5DL = sbend('QF5DL', 3.82501000000000e-001, 0.00000000000000e+000, 3.15900000000000e-005, 5.02100000000000e-005, 2.05887362286000e-001, 'BndMPoleSymplectic4RadPass');
DB2A = drift('DB2A', 1.47848618095770e+001,  'DriftPass');
DB2B = drift('DB2B', 1.88383787000000e+000,  'DriftPass');
DB2C = drift('DB2C', 7.50000000000000e-001,  'DriftPass');
DB3 = drift('DB3', 1.25497441300000e+001,  'DriftPass');
DQ7 = drift('DQ7', 1.42990400000000e+000,  'DriftPass');
DQDS0R = drift('DQDS0R', 1.43189911188720e+001,  'DriftPass');
QD6R = quadrupole('QD6R', 3.66366000000000e-001, -3.58452768029000e-001, 'StrMPoleSymplectic4RadPass');
QF7R = quadrupole('QF7R', 3.66366000000000e-001, 2.61244199741000e-001, 'StrMPoleSymplectic4RadPass');
QD6L = quadrupole('QD6L', 3.66366000000000e-001, -3.64688875395000e-001, 'StrMPoleSymplectic4RadPass');
QF7L = quadrupole('QF7L', 3.66366000000000e-001, 2.68510490215000e-001, 'StrMPoleSymplectic4RadPass');
BLF = sbend('BLF', 2.00000000000000e+000, 2.41892529499000e-003, 1.20946264750000e-003, 1.20946264750000e-003, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
B2 = sbend('B2', 2.00000000000000e+000, 6.80499300000000e-003, 3.40249650000000e-003, 3.40249650000000e-003, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
B3 = sbend('B3', 2.00000000000000e+000, -1.00752883170000e-002, -5.03764415850000e-003, -5.03764415850000e-003, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
BLFM = sbend('BLFM', 2.00000000000000e+000, -2.41892529499000e-003, -1.20946264750000e-003, -1.20946264750000e-003, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
B2M = sbend('B2M', 2.00000000000000e+000, -6.80499300000000e-003, -3.40249650000000e-003, -3.40249650000000e-003, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
B3M = sbend('B3M', 2.00000000000000e+000, 1.00752883170000e-002, 5.03764415850000e-003, 5.03764415850000e-003, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
DFDX = drift('DFDX', 7.15120650000000e+000,  'DriftPass');
DOI1 = drift('DOI1', 1.02500000000000e+000,  'DriftPass');
DOI3 = drift('DOI3', 2.03245095000000e+001,  'DriftPass');
DOI4 = drift('DOI4', 8.00000000000000e-001,  'DriftPass');
DSEP = drift('DSEP', 6.25000000000000e-001,  'DriftPass');
DOI2A = drift('DOI2A', 1.60286875000000e+001,  'DriftPass');
DOI2B = drift('DOI2B', 2.77500000000000e+000,  'DriftPass');
DOI5A = drift('DOI5A', 3.60486450000000e+000,  'DriftPass');
DOI5B = drift('DOI5B', 1.54634200000000e+000,  'DriftPass');
QFOI = quadrupole('QFOI', 2.79178000000000e-001, 2.18272073214000e-001, 'StrMPoleSymplectic4RadPass');
QDOI = quadrupole('QDOI', 2.79178000000000e-001, -1.75782343660000e-001, 'StrMPoleSymplectic4RadPass');
QFI = quadrupole('QFI', 2.25000000000000e-001, 1.28926831959000e-001, 'StrMPoleSymplectic4RadPass');
QDI = quadrupole('QDI', 2.25000000000000e-001, -7.24270596030000e-002, 'StrMPoleSymplectic4RadPass');
BK = corrector('BK', 7.50000000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BM1L = corrector('BM1L', 1.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BM2L = corrector('BM2L', 1.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BM1R = corrector('BM1R', 1.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BM2R = corrector('BM2R', 1.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
QDP = quadrupole('QDP', 3.66366000000000e-001, -1.81922393109000e-001, 'StrMPoleSymplectic4RadPass');
QDP6R04 = quadrupole('QDP6R04', 3.66366000000000e-001, -2.07097313571000e-001, 'StrMPoleSymplectic4RadPass');
QDP8R04 = quadrupole('QDP8R04', 3.66366000000000e-001, -1.78348476772000e-001, 'StrMPoleSymplectic4RadPass');
QDP6R06 = quadrupole('QDP6R06', 3.66366000000000e-001, -2.07097313571000e-001, 'StrMPoleSymplectic4RadPass');
QDP8R06 = quadrupole('QDP8R06', 3.66366000000000e-001, -1.78348476772000e-001, 'StrMPoleSymplectic4RadPass');
QFP = quadrupole('QFP', 3.66366000000000e-001, 1.86475428120000e-001, 'StrMPoleSymplectic4RadPass');
QFP7R04 = quadrupole('QFP7R04', 3.66366000000000e-001, 2.00838427677000e-001, 'StrMPoleSymplectic4RadPass');
QFP9R04 = quadrupole('QFP9R04', 3.66366000000000e-001, 2.28190319514000e-001, 'StrMPoleSymplectic4RadPass');
QFP7R06 = quadrupole('QFP7R06', 3.66366000000000e-001, 2.00838427677000e-001, 'StrMPoleSymplectic4RadPass');
QFP9R06 = quadrupole('QFP9R06', 3.66366000000000e-001, 2.28190319514000e-001, 'StrMPoleSymplectic4RadPass');
DPH0 = drift('DPH0', 5.21326800000000e+000,  'DriftPass');
DPHZ = drift('DPHZ', 5.47376800000000e+000,  'DriftPass');
DPH1 = drift('DPH1', 5.47376800000000e+000,  'DriftPass');
DPH2 = drift('DPH2', 5.47376800000000e+000,  'DriftPass');
DPH3 = drift('DPH3', 7.04026800000000e+000,  'DriftPass');
DPH4 = drift('DPH4', 6.21326800000000e+000,  'DriftPass');
DPH8 = drift('DPH8', 5.26726800000000e+000,  'DriftPass');
DPH9 = drift('DPH9', 3.85445600000000e+000,  'DriftPass');
QFRFC = quadrupole('QFRFC', 3.66366000000000e-001, 1.99990274274000e-001, 'StrMPoleSymplectic4RadPass');
QFRF = quadrupole('QFRF', 3.66366000000000e-001, 2.06380355880000e-001, 'StrMPoleSymplectic4RadPass');
QFRF9R08 = quadrupole('QFRF9R08', 3.66366000000000e-001, 2.11758650517000e-001, 'StrMPoleSymplectic4RadPass');
QFRF9R12 = quadrupole('QFRF9R12', 3.66366000000000e-001, 2.11758650517000e-001, 'StrMPoleSymplectic4RadPass');
QDRFC = quadrupole('QDRFC', 3.66366000000000e-001, -1.99990274274000e-001, 'StrMPoleSymplectic4RadPass');
QDRF = quadrupole('QDRF', 3.66366000000000e-001, -2.06380355880000e-001, 'StrMPoleSymplectic4RadPass');
QDRF4 = quadrupole('QDRF4', 3.66366000000000e-001, -2.16645624687000e-001, 'StrMPoleSymplectic4RadPass');
QDRF8R08 = quadrupole('QDRF8R08', 3.66366000000000e-001, -1.80082166529000e-001, 'StrMPoleSymplectic4RadPass');
QDRF8R12 = quadrupole('QDRF8R12', 3.66366000000000e-001, -1.80082166529000e-001, 'StrMPoleSymplectic4RadPass');
DRF0 = drift('DRF0', 5.21326800000000e+000,  'DriftPass');
DRFZ = drift('DRFZ', 6.34039300000000e+000,  'DriftPass');
DRF1 = drift('DRF1', 6.34039300000000e+000,  'DriftPass');
DRF2 = drift('DRF2', 6.34039300000000e+000,  'DriftPass');
DRF3 = drift('DRF3', 6.24039300000000e+000,  'DriftPass');
DRF8 = drift('DRF8', 4.76726800000000e+000,  'DriftPass');
DRF9 = drift('DRF9', 3.55445600000000e+000,  'DriftPass');
M_A = marker('M_A', 'IdentityPass');
M_S = marker('M_S', 'IdentityPass');
BA = sbend('BA', 2.70000000000000e+000, 1.63624617370000e-002, 1.63624617370000e-002, 0.00000000000000e+000, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
BB = sbend('BB', 2.70000000000000e+000, 1.63624617370000e-002, 0.00000000000000e+000, 1.63624617370000e-002, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
BBA = sbend('BBA', 2.28000000000000e+000, 1.38171899120000e-002, 0.00000000000000e+000, 1.38171899120000e-002, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
BBB = sbend('BBB', 4.20000000000000e-001, 2.54527182583000e-003, -1.38171899120000e-002, 1.63624617370000e-002, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
BCA = sbend('BCA', 4.68000000000000e-001, 2.83616003449000e-003, 0.00000000000000e+000, 2.83616003449000e-003, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
BCB = sbend('BCB', 2.23200000000000e+000, 1.35263017030000e-002, -2.83616003449000e-003, 1.63624617370000e-002, 0.00000000000000e+000, 'BndMPoleSymplectic4RadPass');
D56QM = drift('D56QM', 1.41256000000000e-001,  'DriftPass');
D56SQM = drift('D56SQM', 1.62401000000000e-001,  'DriftPass');
D73QM = drift('D73QM', 1.51434000000000e-001,  'DriftPass');
D45QM = drift('D45QM', 2.16579000000000e-001,  'DriftPass');
D45QMB = drift('D45QMB', 1.67609000000000e-001,  'DriftPass');
D56MC = drift('D56MC', 1.42170000000000e-002,  'DriftPass');
D73MC = drift('D73MC', -4.80490000000000e-002,  'DriftPass');
D45MC = drift('D45MC', -6.92800000000000e-003,  'DriftPass');
D45MCB = drift('D45MCB', 4.20420000000000e-002,  'DriftPass');
D56CB = drift('D56CB', 3.63847574167000e-001,  'DriftPass');
D73CB = drift('D73CB', 3.28747574167000e-001,  'DriftPass');
D56BS = drift('D56BS', 4.68672574167000e-001,  'DriftPass');
D56BC = drift('D56BC', 8.20818574167000e-001,  'DriftPass');
D56SQ = drift('D56SQ', 1.02146000000000e-001,  'DriftPass');
D73QC = drift('D73QC', 1.03385000000000e-001,  'DriftPass');
D56QC = drift('D56QC', 1.55473000000000e-001,  'DriftPass');
D45QC = drift('D45QC', 2.09651000000000e-001,  'DriftPass');
HVCOR = corrector('HVCOR', 1.50749000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
SYNCMIR = marker('SYNCMIR', 'IdentityPass');
SYNCSRC = marker('SYNCSRC', 'IdentityPass');
DQ56SX = drift('DQ56SX', 1.02146000000000e-001,  'DriftPass');
SD2A = sextupole('SD2A', 1.25000000000000e-001, -3.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
SD4A = sextupole('SD4A', 1.25000000000000e-001, -3.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
SF3B = sextupole('SF3B', 1.25000000000000e-001, 2.62500000000000e+000, 'StrMPoleSymplectic4RadPass');
SF6B = sextupole('SF6B', 1.25000000000000e-001, 2.62500000000000e+000, 'StrMPoleSymplectic4RadPass');
SD = sextupole('SD', 1.25000000000000e-001, -1.33453680034650e+000, 'StrMPoleSymplectic4RadPass');
SF = sextupole('SF', 1.25000000000000e-001, 7.89615446757000e-001, 'StrMPoleSymplectic4RadPass');
DSX = drift('DSX', 1.25000000000000e-001,  'DriftPass');
DSK = drift('DSK', 4.31751000000000e-001,  'DriftPass');
DSK1 = drift('DSK1', 5.99751000000000e-001,  'DriftPass');
SQ1L = quadrupole('SQ1L', 2.20000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQ1L}.ElemData.PolynomA = [0 3.19380520927000e-003 0 0];
SQ2L = quadrupole('SQ2L', 2.20000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQ2L}.ElemData.PolynomA = [0 -3.83256545324000e-003 0 0];
SQ3L = quadrupole('SQ3L', 1.25000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQ3L}.ElemData.PolynomA = [0 -3.42965137183000e-004 0 0];
SQ4L = quadrupole('SQ4L', 1.25000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQ4L}.ElemData.PolynomA = [0 8.97646098503000e-004 0 0];
SQ1R = quadrupole('SQ1R', 2.20000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQ1R}.ElemData.PolynomA = [0 -9.91913916561000e-003 0 0];
SQ2R = quadrupole('SQ2R', 2.20000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQ2R}.ElemData.PolynomA = [0 8.30552701584000e-003 0 0];
SQ3R = quadrupole('SQ3R', 1.25000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQ3R}.ElemData.PolynomA = [0 6.90128165791000e-004 0 0];
SQ4R = quadrupole('SQ4R', 1.25000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQ4R}.ElemData.PolynomA = [0 5.84827857249000e-003 0 0];
SQG1 = quadrupole('SQG1', 2.20000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQG1}.ElemData.PolynomA = [0 0.00000000000000e+000 0 0];
SQG2 = quadrupole('SQG2', 2.20000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQG2}.ElemData.PolynomA = [0 0.00000000000000e+000 0 0];
SQG3 = quadrupole('SQG3', 2.20000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQG3}.ElemData.PolynomA = [0 0.00000000000000e+000 0 0];
SQG4 = quadrupole('SQG4', 2.20000000000000e-001, 0.00000000000000e+000, 'StrMPoleSymplectic4RadPass');
FAMLIST{SQG4}.ElemData.PolynomA = [0 0.00000000000000e+000 0 0];
DUSQ = drift('DUSQ', 2.20000000000000e-001,  'DriftPass');
COLL = drift('COLL', 5.00000000000000e-001,  'DriftPass');
COLLF = drift('COLLF', 5.00000000000000e-001,  'DriftPass');
MCOL = aperture('MCOL', [-1.00000000000000e+001 1.00000000000000e+001 -1.00000000000000e+001 1.00000000000000e+001],  'AperturePass');
MCOLF = aperture('MCOLF', [-1.00000000000000e+001 1.00000000000000e+001 -1.00000000000000e+001 1.00000000000000e+001],  'AperturePass');
HCOR1L = corrector('HCOR1L', 0.00000000000000e+000, [5.13739182772000e-006 0.00000000000000e+000],  'CorrectorPass');
HCOR2L = corrector('HCOR2L', 0.00000000000000e+000, [7.35701667822000e-006 0.00000000000000e+000],  'CorrectorPass');
VCOR1L = corrector('VCOR1L', 0.00000000000000e+000, [0.00000000000000e+000 3.55586702418000e-004],  'CorrectorPass');
VCOR2L = corrector('VCOR2L', 0.00000000000000e+000, [0.00000000000000e+000 -2.20493239020000e-005],  'CorrectorPass');
HCOR1R = corrector('HCOR1R', 0.00000000000000e+000, [-1.12091437529000e-005 0.00000000000000e+000],  'CorrectorPass');
HCOR2R = corrector('HCOR2R', 0.00000000000000e+000, [-5.00028200187000e-006 0.00000000000000e+000],  'CorrectorPass');
VCOR1R = corrector('VCOR1R', 0.00000000000000e+000, [0.00000000000000e+000 1.43985310087000e-004],  'CorrectorPass');
VCOR2R = corrector('VCOR2R', 0.00000000000000e+000, [0.00000000000000e+000 -2.62528676538000e-005],  'CorrectorPass');
DSC2LM = drift('DSC2LM', 3.64467222768000e-001,  'DriftPass');
DSC4LM = drift('DSC4LM', 3.64301471478000e-001,  'DriftPass');
DSC6LM = drift('DSC6LM', 3.64141754088000e-001,  'DriftPass');
DSC8LM = drift('DSC8LM', 3.63982043410000e-001,  'DriftPass');
DSC1RM = drift('DSC1RM', 3.63157859319000e-001,  'DriftPass');
DSC3RM = drift('DSC3RM', 3.63343272896000e-001,  'DriftPass');
DSC5RM = drift('DSC5RM', 3.63502956727000e-001,  'DriftPass');
DSC7RM = drift('DSC7RM', 3.63662647269000e-001,  'DriftPass');
DSC9RM = drift('DSC9RM', 3.63812145596000e-001,  'DriftPass');
DSC6RM = drift('DSC6RM', 4.68384687944000e-001,  'DriftPass');
DSC8RX = drift('DSC8RX', 4.68544378486000e-001,  'DriftPass');
D9LBS = drift('D9LBS', 4.68712784871000e-001,  'DriftPass');
D5LBS = drift('D5LBS', 4.69023485305000e-001,  'DriftPass');
DSC3LB = drift('DSC3LB', 4.69183202695000e-001,  'DriftPass');
DSC3LQ = drift('DSC3LQ', 1.02146000000000e-001,  'DriftPass');
DSC7LB = drift('DSC7LB', 4.68863774627000e-001,  'DriftPass');
DSC7LQ = drift('DSC7LQ', 1.02146000000000e-001,  'DriftPass');
DSC2RB = drift('DSC2RB', 4.68061897579000e-001,  'DriftPass');
DSC2RQ = drift('DSC2RQ', 1.02146000000000e-001,  'DriftPass');
DSC4RB = drift('DSC4RB', 4.68225004113000e-001,  'DriftPass');
DSC4RQ = drift('DSC4RQ', 1.02146000000000e-001,  'DriftPass');
M_ARC = marker('M_ARC', 'IdentityPass');
M_ST = marker('M_ST', 'IdentityPass');
SQ5R = multipole('SQ5R', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
SQ6R = multipole('SQ6R', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
SQ6L = multipole('SQ6L', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
SQ5L = multipole('SQ5L', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
DMPH0 = drift('DMPH0', 4.65695100000000e+000,  'DriftPass');
DMPHZ = drift('DMPHZ', 4.91745100000000e+000,  'DriftPass');
DMPH1 = drift('DMPH1', 4.91745100000000e+000,  'DriftPass');
DMPH2 = drift('DMPH2', 4.91745100000000e+000,  'DriftPass');
DMPH3 = drift('DMPH3', 4.40125100000000e+000,  'DriftPass');
DMPH3A = drift('DMPH3A', 4.65470000000000e+000,  'DriftPass');
DMPH4 = drift('DMPH4', 5.65695100000000e+000,  'DriftPass');
DMPH8A = drift('DMPH8A', 3.63584200000000e+000,  'DriftPass');
DMPH8 = drift('DMPH8', 4.71095100000000e+000,  'DriftPass');
DMPH9 = drift('DMPH9', 2.40982200000000e+000,  'DriftPass');
DMPH9A = drift('DMPH9A', 3.24605100000000e+000,  'DriftPass');
DSQG2 = drift('DSQG2', 6.35109000000000e-001,  'DriftPass');
DSQG3 = drift('DSQG3', 1.38925100000000e+000,  'DriftPass');
DSQG4 = drift('DSQG4', 1.64270000000000e+000,  'DriftPass');
CAV1AR04 = marker('CAV1AR04', 'IdentityPass');
CAV1BR04 = marker('CAV1BR04', 'IdentityPass');
DCAV1AR04 = drift('DCAV1AR04', 1.25105100000000e+000,  'DriftPass');
DCAV1BR04 = drift('DCAV1BR04', 2.04700000000000e+000,  'DriftPass');
DH04RF1C = drift('DH04RF1C', 3.18590000000000e+000,  'DriftPass');
TRANFEEDBCK = marker('TRANFEEDBCK',  'IdentityPass');
LONGFEEDBCK = drift('LONGFEEDBCK', 1.00000000000000e-001,  'DriftPass');
LNGFDBCK = marker('LNGFDBCK',  'IdentityPass');
VERTDAMPER = corrector('VERTDAMPER', 5.10000000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
HORIZDAMPER = corrector('HORIZDAMPER', 5.10000000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
LONGDAMPER = corrector('LONGDAMPER', 5.10000000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
PICKUPTUNE = marker('PICKUPTUNE',  'IdentityPass');
PHASERFCA = marker('PHASERFCA',  'IdentityPass');
PK810504 = marker('PK810504',  'IdentityPass');
PK810604 = marker('PK810604',  'IdentityPass');
D7092 = drift('D7092', 1.07972000000000e-001,  'DriftPass');
D7092B = drift('D7092B', 4.80947900000000e+000,  'DriftPass');
D8012 = drift('D8012', 1.07972000000000e-001,  'DriftPass');
D8015 = drift('D8015', 5.44100000000000e-001,  'DriftPass');
D8016 = drift('D8016', 1.86500000000000e-001,  'DriftPass');
D8016B = drift('D8016B', 2.03887900000000e+000,  'DriftPass');
D8025 = drift('D8025', 6.52072000000000e-001,  'DriftPass');
D8026 = drift('D8026', 1.86500000000000e-001,  'DriftPass');
D8026B = drift('D8026B', 2.03887900000000e+000,  'DriftPass');
D8032 = drift('D8032', 1.07972000000000e-001,  'DriftPass');
D8035 = drift('D8035', 7.95560000000000e-001,  'DriftPass');
D8036 = drift('D8036', 1.45778000000000e+000,  'DriftPass');
D8036B = drift('D8036B', 5.16139000000000e-001,  'DriftPass');
D8042 = drift('D8042', 1.07972000000000e-001,  'DriftPass');
D8042B = drift('D8042B', 1.14307900000000e+000,  'DriftPass');
D8052 = drift('D8052', 1.07972000000000e-001,  'DriftPass');
D8052B = drift('D8052B', 5.54897900000000e+000,  'DriftPass');
D8062 = drift('D8062', 1.07972000000000e-001,  'DriftPass');
D8062B = drift('D8062B', 4.54897900000000e+000,  'DriftPass');
D8082 = drift('D8082', 1.07972000000000e-001,  'DriftPass');
D8082B = drift('D8082B', 4.54897900000000e+000,  'DriftPass');
D8105 = drift('D8105', 1.21134300000000e+000,  'DriftPass');
D8106 = drift('D8106', 2.00000000000000e-001,  'DriftPass');
D8106B = drift('D8106B', 7.98479000000000e-001,  'DriftPass');
IDCCT1 = drift('IDCCT1', 2.10000000000000e-001,  'DriftPass');
IDCCT2 = drift('IDCCT2', 2.10000000000000e-001,  'DriftPass');
BUNCHCURMON = marker('BUNCHCURMON',  'IdentityPass');
DDCCT1 = drift('DDCCT1', 3.39617400000000e+000,  'DriftPass');
DDCCT2 = drift('DDCCT2', 1.53532000000000e-001,  'DriftPass');
DDCCT2B = drift('DDCCT2B', 2.67245000000000e-001,  'DriftPass');
DBCM1 = drift('DBCM1', 1.07951000000000e-001,  'DriftPass');
DBCM2 = drift('DBCM2', 4.54900000000000e+000,  'DriftPass');
PPSSTOPPER = marker('PPSSTOPPER',  'IdentityPass');
DPPSSA = drift('DPPSSA', 2.33946900000000e+000,  'DriftPass');
DPPSSB = drift('DPPSSB', 4.19417000000000e-001,  'DriftPass');
DPPSSC = drift('DPPSSC', 1.95206500000000e+000,  'DriftPass');
COLLX1 = aperture('COLLX1', [-1.00000000000000e+001 1.00000000000000e+001 -1.00000000000000e+001 1.00000000000000e+001],  'AperturePass');
COLLX2 = aperture('COLLX2', [-1.00000000000000e+001 1.00000000000000e+001 -1.00000000000000e+001 1.00000000000000e+001],  'AperturePass');
COLLY1 = aperture('COLLY1', [-1.00000000000000e+001 1.00000000000000e+001 -1.00000000000000e+001 1.00000000000000e+001],  'AperturePass');
COLLY2 = aperture('COLLY2', [-1.00000000000000e+001 1.00000000000000e+001 -1.00000000000000e+001 1.00000000000000e+001],  'AperturePass');
DGCBPM = drift('DGCBPM', 2.74320000000000e-001,  'DriftPass');
DMRF0 = drift('DMRF0', 4.65695100000000e+000,  'DriftPass');
DMRF0B = drift('DMRF0B', 4.38263100000000e+000,  'DriftPass');
DMRF0C = drift('DMRF0C', 4.38263100000000e+000,  'DriftPass');
DMRF8 = drift('DMRF8', 4.21095100000000e+000,  'DriftPass');
DMRF9 = drift('DMRF9', 2.94605100000000e+000,  'DriftPass');
DMRF3S = drift('DMRF3S', 4.81232500000000e+000,  'DriftPass');
DMRF9S = drift('DMRF9S', 2.12638800000000e+000,  'DriftPass');
DUOX = drift('DUOX', 1.50000000000000e-001,  'DriftPass');
DUOY = drift('DUOY', 1.50000000000000e-001,  'DriftPass');
DUOXY = drift('DUOXY', 1.50000000000000e-001,  'DriftPass');
D73CO = drift('D73CO', 9.06197000000000e-001,  'DriftPass');
D73OO = drift('D73OO', 2.31728300000000e+000,  'DriftPass');
D73OQ = drift('D73OQ', 4.57787900000000e+000,  'DriftPass');
D73OOQ = drift('D73OOQ', 1.96059600000000e+000,  'DriftPass');
D73OOQA = drift('D73OOQA', 1.68627600000000e+000,  'DriftPass');
D73CO12 = drift('D73CO12', 2.62233900000000e+000,  'DriftPass');
D73OQ12 = drift('D73OQ12', 2.86173700000000e+000,  'DriftPass');
D73OQ12A = drift('D73OQ12A', 2.58741700000000e+000,  'DriftPass');
CAV1AR08 = rfcavity('CAV1AR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV1BR08 = rfcavity('CAV1BR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV1CR08 = rfcavity('CAV1CR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV1DR08 = rfcavity('CAV1DR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV3AR08 = rfcavity('CAV3AR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV3BR08 = rfcavity('CAV3BR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV3CR08 = rfcavity('CAV3CR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV3DR08 = rfcavity('CAV3DR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV5AR08 = rfcavity('CAV5AR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV5BR08 = rfcavity('CAV5BR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV5CR08 = rfcavity('CAV5CR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV5DR08 = rfcavity('CAV5DR08', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV1AR12 = rfcavity('CAV1AR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV1BR12 = rfcavity('CAV1BR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV1CR12 = rfcavity('CAV1CR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV1DR12 = rfcavity('CAV1DR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV3AR12 = rfcavity('CAV3AR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV3BR12 = rfcavity('CAV3BR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV3CR12 = rfcavity('CAV3CR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV3DR12 = rfcavity('CAV3DR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV5AR12 = rfcavity('CAV5AR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV5BR12 = rfcavity('CAV5BR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV5CR12 = rfcavity('CAV5CR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
CAV5DR12 = rfcavity('CAV5DR12', 0.00000000000000e+000, 0.7e6, 475999970.046, 3.49200000000000e+003, 'ThinCavityPass');
DCAVSEP = drift('DCAVSEP', 2.04700000000000e+000,  'DriftPass');
DRFC1A = drift('DRFC1A', 1.37025100000000e+000,  'DriftPass');
DRFC1B = drift('DRFC1B', 7.93700000000000e-001,  'DriftPass');
DRFC1C = drift('DRFC1C', 1.38125100000000e+000,  'DriftPass');
DRFC1X = drift('DRFC1X', 1.27327900000000e+000,  'DriftPass');
DRFC1D = drift('DRFC1D', 1.22870000000000e+000,  'DriftPass');
DRFC3A = drift('DRFC3A', 1.81075100000000e+000,  'DriftPass');
DRFC3B = drift('DRFC3B', 7.99200000000000e-001,  'DriftPass');
DRFC3C = drift('DRFC3C', 1.37575100000000e+000,  'DriftPass');
DRFC3D = drift('DRFC3D', 1.23420000000000e+000,  'DriftPass');
DRFC5A = drift('DRFC5A', 1.80525100000000e+000,  'DriftPass');
DRFC5B = drift('DRFC5B', 8.04700000000000e-001,  'DriftPass');
DRFC5C = drift('DRFC5C', 1.37025100000000e+000,  'DriftPass');
DRFC5D = drift('DRFC5D', 2.26682500000000e+000,  'DriftPass');
D706212B = drift('D706212B', 1.69727900000000e+000,  'DriftPass');
ABORTBPM = marker('ABORTBPM',  'IdentityPass');
D703208 = drift('D703208', 1.07972000000000e-001,  'DriftPass');
D703208B = drift('D703208B', 0.00000000000000e+000,  'DriftPass');
D801208 = drift('D801208', 1.07972000000000e-001,  'DriftPass');
D801208B = drift('D801208B', 7.98225000000000e-001,  'DriftPass');
D804208 = drift('D804208', 1.07972000000000e-001,  'DriftPass');
D804208B = drift('D804208B', 3.23779000000000e-001,  'DriftPass');
D706212A = drift('D706212A', 1.07972000000000e-001,  'DriftPass');
BLAM = corrector('BLAM', 1.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BKABRT1 = corrector('BKABRT1', 5.45211000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BKABRT2 = corrector('BKABRT2', 5.45211000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
DBKABRT1 = drift('DBKABRT1', 7.99781000000000e-001,  'DriftPass');
DBKABRT2 = drift('DBKABRT2', 1.00457000000000e+000,  'DriftPass');
DMOI3 = drift('DMOI3', 1.58281660000000e+001,  'DriftPass');
BKPINGV = corrector('BKPINGV', 5.45211000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BKPINGH = corrector('BKPINGH', 5.45211000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
DBKPING1 = drift('DBKPING1', 7.99780500000000e-001,  'DriftPass');
DBKPING2 = drift('DBKPING2', 1.00457000000000e+000,  'DriftPass');
DM5656 = drift('DM5656', 6.69423550000000e+000,  'DriftPass');
DM5656A = drift('DM5656A', 6.53183450000000e+000,  'DriftPass');
DOI1A = drift('DOI1A', 8.08421000000000e-001,  'DriftPass');
DMOI4 = drift('DMOI4', 6.37599000000000e-001,  'DriftPass');
DMOI5B = drift('DMOI5B', 2.17620000000000e-001,  'DriftPass');
DMOI5A = drift('DMOI5A', 3.14789350000000e+000,  'DriftPass');
DMOI2B = drift('DMOI2B', 2.26385100000000e+000,  'DriftPass');
DOI2BM = drift('DOI2BM', 2.55842100000000e+000,  'DriftPass');
DMOI2A = drift('DMOI2A', 1.55175385000000e+001,  'DriftPass');
DOI3S = drift('DOI3S', 1.61227355000000e+001,  'DriftPass');
DOI2AA = drift('DOI2AA', 1.32536875000000e+001,  'DriftPass');
DOI2AB = drift('DOI2AB', 7.75000000000000e-001,  'DriftPass');
DOI5BB = drift('DOI5BB', 5.12190000000000e-001,  'DriftPass');
DQD4BM = drift('DQD4BM', 1.35539000000000e-001,  'DriftPass');
DBMHV = drift('DBMHV', 2.02510000000000e-002,  'DriftPass');
DHVQF5 = drift('DHVQF5', 2.77713000000000e-001,  'DriftPass');
DQF5SQA = drift('DQF5SQA', 1.99135000000000e-001,  'DriftPass');
DQF5SQB = drift('DQF5SQB', 6.01160000000000e-002,  'DriftPass');
DQF5SQAL = drift('DQF5SQAL', 1.60135000000000e-001,  'DriftPass');
DQF5SQBL = drift('DQF5SQBL', 2.24251000000000e-001,  'DriftPass');
DQF5SQC = drift('DQF5SQC', 1.35541128095770e+001,  'DriftPass');
DQF5SQCA = drift('DQF5SQCA', 1.23703128095770e+001,  'DriftPass');
DQF5SQCB = drift('DQF5SQCB', 1.18380000000000e+000,  'DriftPass');
DSQ1BLF = drift('DSQ1BLF', 2.30000000000000e-001,  'DriftPass');
DBLFB2 = drift('DBLFB2', 7.50000000000000e-001,  'DriftPass');
DB2SEP = drift('DB2SEP', 1.94600000000000e+000,  'DriftPass');
DSEPSQ2A = drift('DSEPSQ2A', 1.69510000000000e-002,  'DriftPass');
DSEPSQ2K = drift('DSEPSQ2K', 8.61555100000000e+000,  'DriftPass');
DSQ2B3 = drift('DSQ2B3', 1.12974413000000e+000,  'DriftPass');
DB3QD6L = drift('DB3QD6L', 2.22895487000000e+000,  'DriftPass');
DB3QD6R = drift('DB3QD6R', 2.48240387000000e+000,  'DriftPass');
DQD6QF7 = drift('DQD6QF7', 8.73587000000000e-001,  'DriftPass');
DQD6QF7L = drift('DQD6QF7L', 8.73587000000000e-001,  'DriftPass');
DSEPR = drift('DSEPR', 1.12816700000000e+000,  'DriftPass');
DSEPL = drift('DSEPL', 1.38161600000000e+000,  'DriftPass');
DSEPQDS0 = drift('DSEPQDS0', 1.15359411188720e+001,  'DriftPass');
DSPQDS0L = drift('DSPQDS0L', 1.10789701188720e+001,  'DriftPass');
DSQ2COL = drift('DSQ2COL', 6.16811000000000e+000,  'DriftPass');
DCOLSEPA = drift('DCOLSEPA', 3.95394000000000e-001,  'DriftPass');
DCOLSEPB = drift('DCOLSEPB', 1.77757000000000e-001,  'DriftPass');
DCOLSEPC = drift('DCOLSEPC', 8.91241000000000e-001,  'DriftPass');
DSQ1COL = drift('DSQ1COL', 1.03380448095770e+001,  'DriftPass');
DCOLHC1 = drift('DCOLHC1', 2.09093300000000e+000,  'DriftPass');
BSEP1L = corrector('BSEP1L', 6.25000000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BSEP1R = corrector('BSEP1R', 6.25000000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BSEP2L = corrector('BSEP2L', 5.00000000000000e-002, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BSEP2R = corrector('BSEP2R', 5.00000000000000e-002, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BLFCOR = corrector('BLFCOR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
BLFMCOR = corrector('BLFMCOR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
MMM = marker('MMM',  'IdentityPass');
S0STL = solenoid('S0STL', 2.62537500000000e-002, -4.99412933880000e-002, 'SolenoidPass');
S1STL = solenoid('S1STL', 5.25075000000000e-002, -4.99538220480000e-002, 'SolenoidPass');
S2STL = solenoid('S2STL', 5.25075000000000e-002, -4.99596186420000e-002, 'SolenoidPass');
S3STL = solenoid('S3STL', 5.25075000000000e-002, -4.99433814980000e-002, 'SolenoidPass');
S4STL = solenoid('S4STL', 2.62537500000000e-002, -4.99183909980000e-002, 'SolenoidPass');
S0STR = solenoid('S0STR', 2.62537500000000e-002, -4.99315210330000e-002, 'SolenoidPass');
S1STR = solenoid('S1STR', 5.25075000000000e-002, -4.99168207390000e-002, 'SolenoidPass');
S2STR = solenoid('S2STR', 5.25075000000000e-002, -4.98991302710000e-002, 'SolenoidPass');
S3STR = solenoid('S3STR', 5.25075000000000e-002, -4.98852485160000e-002, 'SolenoidPass');
S4STR = solenoid('S4STR', 2.62537500000000e-002, -4.98770631250000e-002, 'SolenoidPass');
SB1AL = solenoid('SB1AL', 7.50100000000000e-003, -4.99048266350000e-002, 'SolenoidPass');
SB1ABL = solenoid('SB1ABL', 2.00025000000000e-002, -4.98950041660000e-002, 'SolenoidPass');
SB1BCL = solenoid('SB1BCL', 2.50030000000000e-002, -4.98793851030000e-002, 'SolenoidPass');
SB1CDL = solenoid('SB1CDL', 2.50030000000000e-002, -4.98614440620000e-002, 'SolenoidPass');
SB1DEL = solenoid('SB1DEL', 2.50030000000000e-002, -4.98418158280000e-002, 'SolenoidPass');
SB1EFL = solenoid('SB1EFL', 2.50030000000000e-002, -4.98204836960000e-002, 'SolenoidPass');
SB1FGL = solenoid('SB1FGL', 3.75040000000000e-002, -4.97912000420000e-002, 'SolenoidPass');
SB1GHL = solenoid('SB1GHL', 5.00045000000000e-002, -4.97408682380000e-002, 'SolenoidPass');
SB1HIL = solenoid('SB1HIL', 5.00035000000000e-002, -4.96603340120000e-002, 'SolenoidPass');
SB1IJL = solenoid('SB1IJL', 5.00030000000000e-002, -4.95455714870000e-002, 'SolenoidPass');
SB1JKL = solenoid('SB1JKL', 5.00025000000000e-002, -4.93989026400000e-002, 'SolenoidPass');
SB1KP1L = solenoid('SB1KP1L', 4.00015000000000e-002, -4.92448836470000e-002, 'SolenoidPass');
SB1P1L = solenoid('SB1P1L', 1.50005000000000e-002, -4.91411630470000e-002, 'SolenoidPass');
SB1LL = solenoid('SB1LL', 1.00005000000000e-002, -4.90902632780000e-002, 'SolenoidPass');
SB1LML = solenoid('SB1LML', 3.25010000000000e-002, -4.89970333430000e-002, 'SolenoidPass');
SB1ML = solenoid('SB1ML', 2.25005000000000e-002, -4.88700762550000e-002, 'SolenoidPass');
SB1AR = solenoid('SB1AR', 7.50100000000000e-003, -4.98740562460000e-002, 'SolenoidPass');
SB1ABR = solenoid('SB1ABR', 2.00025000000000e-002, -4.98717342680000e-002, 'SolenoidPass');
SB1BCR = solenoid('SB1BCR', 2.50030000000000e-002, -4.98683765870000e-002, 'SolenoidPass');
SB1CDR = solenoid('SB1CDR', 2.50030000000000e-002, -4.98653864140000e-002, 'SolenoidPass');
SB1DER = solenoid('SB1DER', 2.50030000000000e-002, -4.98631813700000e-002, 'SolenoidPass');
SB1EFR = solenoid('SB1EFR', 2.50030000000000e-002, -4.98617113400000e-002, 'SolenoidPass');
SB1FGR = solenoid('SB1FGR', 3.75040000000000e-002, -4.98610765550000e-002, 'SolenoidPass');
SB1GHR = solenoid('SB1GHR', 5.00045000000000e-002, -4.98625465840000e-002, 'SolenoidPass');
SB1HIR = solenoid('SB1HIR', 5.00035000000000e-002, -4.98684099970000e-002, 'SolenoidPass');
SB1IJR = solenoid('SB1IJR', 5.00030000000000e-002, -4.98800867080000e-002, 'SolenoidPass');
SB1JKR = solenoid('SB1JKR', 5.00025000000000e-002, -4.98971423900000e-002, 'SolenoidPass');
SB1KP1R = solenoid('SB1KP1R', 4.00015000000000e-002, -4.99158184460000e-002, 'SolenoidPass');
SB1P1R = solenoid('SB1P1R', 1.50005000000000e-002, -4.99284974500000e-002, 'SolenoidPass');
SB1LR = solenoid('SB1LR', 1.00005000000000e-002, -4.99347617800000e-002, 'SolenoidPass');
SB1LMR = solenoid('SB1LMR', 3.25010000000000e-002, -4.99465053110000e-002, 'SolenoidPass');
SB1MR = solenoid('SB1MR', 2.25005000000000e-002, -4.99627257490000e-002, 'SolenoidPass');
S0D1AL = solenoid('S0D1AL', 2.09330000000000e-002, -4.87611437330000e-002, 'SolenoidPass');
S0D1AR = solenoid('S0D1AR', 2.09330000000000e-002, -4.99765573900000e-002, 'SolenoidPass');
S0D1BL = solenoid('S0D1BL', 2.30088750000000e-002, -4.86428230680000e-002, 'SolenoidPass');
S1D1BL = solenoid('S1D1BL', 4.60177500000000e-002, -4.84372027000000e-002, 'SolenoidPass');
S2D1BL = solenoid('S2D1BL', 4.60177500000000e-002, -4.81363478120000e-002, 'SolenoidPass');
S3D1BL = solenoid('S3D1BL', 4.60177500000000e-002, -4.77933298060000e-002, 'SolenoidPass');
S4D1BL = solenoid('S4D1BL', 2.30088750000000e-002, -4.74965843180000e-002, 'SolenoidPass');
S0D1BR = solenoid('S0D1BR', 2.30088750000000e-002, -4.99906228990000e-002, 'SolenoidPass');
S1D1BR = solenoid('S1D1BR', 4.60177500000000e-002, -5.00111197870000e-002, 'SolenoidPass');
S2D1BR = solenoid('S2D1BR', 4.60177500000000e-002, -5.00369622360000e-002, 'SolenoidPass');
S3D1BR = solenoid('S3D1BR', 4.60177500000000e-002, -5.00605662310000e-002, 'SolenoidPass');
S4D1BR = solenoid('S4D1BR', 2.30088750000000e-002, -5.00761518840000e-002, 'SolenoidPass');
SQ1AAR = solenoid('SQ1AAR', 2.50005000000000e-002, -5.00851725200000e-002, 'SolenoidPass');
SQ1AABR = solenoid('SQ1AABR', 5.00010000000000e-002, -5.00963146740000e-002, 'SolenoidPass');
SQ1ABCR = solenoid('SQ1ABCR', 5.00010000000000e-002, -5.01076405830000e-002, 'SolenoidPass');
SQ1ACDR = solenoid('SQ1ACDR', 5.00010000000000e-002, -5.01126353420000e-002, 'SolenoidPass');
SQ1ADER = solenoid('SQ1ADER', 5.00010000000000e-002, -5.01082586640000e-002, 'SolenoidPass');
SQ1AEFR = solenoid('SQ1AEFR', 5.00005000000000e-002, -5.00928400590000e-002, 'SolenoidPass');
SQ1AFGR = solenoid('SQ1AFGR', 5.00000000000000e-002, -5.00648760900000e-002, 'SolenoidPass');
SQ1AG2R = solenoid('SQ1AG2R', 3.00000000000000e-002, -5.00336045550000e-002, 'SolenoidPass');
SQ1P2R = solenoid('SQ1P2R', 5.00000000000000e-003, -5.00170667240000e-002, 'SolenoidPass');
SQ1AHR = solenoid('SQ1AHR', 2.00000000000000e-002, -5.00032684930000e-002, 'SolenoidPass');
SQ1AHIR = solenoid('SQ1AHIR', 4.50000000000000e-002, -4.99619406200000e-002, 'SolenoidPass');
SQ1AIJR = solenoid('SQ1AIJR', 5.00000000000000e-002, -4.98900929310000e-002, 'SolenoidPass');
SQ1AJKR = solenoid('SQ1AJKR', 5.00000000000000e-002, -4.97975144860000e-002, 'SolenoidPass');
SQ1AKLR = solenoid('SQ1AKLR', 5.00000000000000e-002, -4.96864938540000e-002, 'SolenoidPass');
SQ1ALMR = solenoid('SQ1ALMR', 5.00000000000000e-002, -4.95574486560000e-002, 'SolenoidPass');
SQ1AMNR = solenoid('SQ1AMNR', 5.00000000000000e-002, -4.94125171180000e-002, 'SolenoidPass');
SQ1ANOR = solenoid('SQ1ANOR', 5.00000000000000e-002, -4.92555413600000e-002, 'SolenoidPass');
SQ1AOPR = solenoid('SQ1AOPR', 5.00000000000000e-002, -4.90905305560000e-002, 'SolenoidPass');
SQ1APR = solenoid('SQ1APR', 2.50000000000000e-002, -4.89634565340000e-002, 'SolenoidPass');
SQ1BAR = solenoid('SQ1BAR', 2.50000000000000e-002, -4.88767582070000e-002, 'SolenoidPass');
SQ1BABR = solenoid('SQ1BABR', 5.00000000000000e-002, -4.87424175620000e-002, 'SolenoidPass');
SQ1BBCR = solenoid('SQ1BBCR', 5.00000000000000e-002, -4.85562583800000e-002, 'SolenoidPass');
SQ1BC3R = solenoid('SQ1BC3R', 4.50000000000000e-002, -4.83718866190000e-002, 'SolenoidPass');
SQ1P3R = solenoid('SQ1P3R', 2.00000000000000e-002, -4.82431588140000e-002, 'SolenoidPass');
SQ1BDR = solenoid('SQ1BDR', 5.00000000000000e-003, -4.81932613380000e-002, 'SolenoidPass');
SQ1BDER = solenoid('SQ1BDER', 3.00000000000000e-002, -4.81242367740000e-002, 'SolenoidPass');
SQ1BEFR = solenoid('SQ1BEFR', 5.50070000000000e-002, -4.79627339940000e-002, 'SolenoidPass');
SQ1BFGR = solenoid('SQ1BFGR', 5.50070000000000e-002, -4.77623923690000e-002, 'SolenoidPass');
SQ1BGR = solenoid('SQ1BGR', 2.50000000000000e-002, -4.76199498570000e-002, 'SolenoidPass');
SQ1AAL = solenoid('SQ1AAL', 2.50005000000000e-002, -4.72537454780000e-002, 'SolenoidPass');
SQ1AABL = solenoid('SQ1AABL', 5.00010000000000e-002, -4.68545489610000e-002, 'SolenoidPass');
SQ1ABCL = solenoid('SQ1ABCL', 5.00010000000000e-002, -4.63018345980000e-002, 'SolenoidPass');
SQ1ACDL = solenoid('SQ1ACDL', 5.00010000000000e-002, -4.57030648800000e-002, 'SolenoidPass');
SQ1ADEL = solenoid('SQ1ADEL', 5.00010000000000e-002, -4.50276030580000e-002, 'SolenoidPass');
SQ1AEFL = solenoid('SQ1AEFL', 5.00005000000000e-002, -4.42530478880000e-002, 'SolenoidPass');
SQ1AFGL = solenoid('SQ1AFGL', 5.00000000000000e-002, -4.33565303900000e-002, 'SolenoidPass');
SQ1AG2L = solenoid('SQ1AG2L', 3.00000000000000e-002, -4.25469116770000e-002, 'SolenoidPass');
SQ1P2L = solenoid('SQ1P2L', 5.00000000000000e-003, -4.21618641930000e-002, 'SolenoidPass');
SQ1AHL = solenoid('SQ1AHL', 2.00000000000000e-002, -4.18650518860000e-002, 'SolenoidPass');
SQ1AHIL = solenoid('SQ1AHIL', 4.50000000000000e-002, -4.10336667140000e-002, 'SolenoidPass');
SQ1AIJL = solenoid('SQ1AIJL', 5.00000000000000e-002, -3.96902268570000e-002, 'SolenoidPass');
SQ1AJKL = solenoid('SQ1AJKL', 5.00000000000000e-002, -3.80758171410000e-002, 'SolenoidPass');
SQ1AKLL = solenoid('SQ1AKLL', 5.00000000000000e-002, -3.62184683560000e-002, 'SolenoidPass');
SQ1ALML = solenoid('SQ1ALML', 5.00000000000000e-002, -3.40859567880000e-002, 'SolenoidPass');
SQ1AMNL = solenoid('SQ1AMNL', 5.00000000000000e-002, -3.16653361550000e-002, 'SolenoidPass');
SQ1ANOL = solenoid('SQ1ANOL', 5.00000000000000e-002, -2.89723925690000e-002, 'SolenoidPass');
SQ1AOPL = solenoid('SQ1AOPL', 5.00000000000000e-002, -2.60468335290000e-002, 'SolenoidPass');
SQ1APL = solenoid('SQ1APL', 2.50000000000000e-002, -2.37465214420000e-002, 'SolenoidPass');
SQ1BAL = solenoid('SQ1BAL', 2.50000000000000e-002, -2.21661562720000e-002, 'SolenoidPass');
SQ1BABL = solenoid('SQ1BABL', 5.00000000000000e-002, -1.97821193260000e-002, 'SolenoidPass');
SQ1BBCL = solenoid('SQ1BBCL', 5.00000000000000e-002, -1.66700837110000e-002, 'SolenoidPass');
SQ1BC3L = solenoid('SQ1BC3L', 4.50000000000000e-002, -1.38904417980000e-002, 'SolenoidPass');
SQ1P3L = solenoid('SQ1P3L', 2.00000000000000e-002, -1.21178201640000e-002, 'SolenoidPass');
SQ1BDL = solenoid('SQ1BDL', 5.00000000000000e-003, -1.14755175290000e-002, 'SolenoidPass');
SQ1BDEL = solenoid('SQ1BDEL', 3.00000000000000e-002, -1.06262247260000e-002, 'SolenoidPass');
SQ1BEFL = solenoid('SQ1BEFL', 5.50070000000000e-002, -8.73342818558000e-003, 'SolenoidPass');
SQ1BFGL = solenoid('SQ1BFGL', 5.50070000000000e-002, -6.63304010180000e-003, 'SolenoidPass');
SQ1BGL = solenoid('SQ1BGL', 2.50000000000000e-002, -5.37628186657000e-003, 'SolenoidPass');
S0D2L = solenoid('S0D2L', 2.46664000000000e-002, -4.74983216260000e-003, 'SolenoidPass');
S1D2L = solenoid('S1D2L', 4.93328000000000e-002, -3.91821312275000e-003, 'SolenoidPass');
S2D2L = solenoid('S2D2L', 4.93328000000000e-002, -2.95303856750000e-003, 'SolenoidPass');
S3D2L = solenoid('S3D2L', 4.93328000000000e-002, -2.18366191045000e-003, 'SolenoidPass');
S4D2L = solenoid('S4D2L', 4.93328000000000e-002, -1.59862360394000e-003, 'SolenoidPass');
S5D2L = solenoid('S5D2L', 4.93328000000000e-002, -1.16603403208000e-003, 'SolenoidPass');
S6D2L = solenoid('S6D2L', 4.93328000000000e-002, -8.48557788137000e-004, 'SolenoidPass');
S7D2L = solenoid('S7D2L', 4.93328000000000e-002, -6.15541417353000e-004, 'SolenoidPass');
S8D2L = solenoid('S8D2L', 4.93328000000000e-002, -4.45418919678000e-004, 'SolenoidPass');
S9D2L = solenoid('S9D2L', 4.93328000000000e-002, -3.22604642095000e-004, 'SolenoidPass');
S10D2L = solenoid('S10D2L', 4.93328000000000e-002, -2.34269236782000e-004, 'SolenoidPass');
S11D2L = solenoid('S11D2L', 4.93328000000000e-002, -1.69871924475000e-004, 'SolenoidPass');
S12D2L = solenoid('S12D2L', 4.93328000000000e-002, -1.22496884863000e-004, 'SolenoidPass');
S13D2L = solenoid('S13D2L', 4.93328000000000e-002, -8.85358638724000e-005, 'SolenoidPass');
S14D2L = solenoid('S14D2L', 4.93328000000000e-002, -6.41467391076000e-005, 'SolenoidPass');
S15D2L = solenoid('S15D2L', 2.46664000000000e-002, -4.90121178494000e-005, 'SolenoidPass');
S0D2R = solenoid('S0D2R', 2.46664000000000e-002, -4.75321657130000e-002, 'SolenoidPass');
S1D2R = solenoid('S1D2R', 4.93328000000000e-002, -4.74033042690000e-002, 'SolenoidPass');
S2D2R = solenoid('S2D2R', 4.93328000000000e-002, -4.72251467240000e-002, 'SolenoidPass');
S3D2R = solenoid('S3D2R', 4.93328000000000e-002, -4.69829092590000e-002, 'SolenoidPass');
S4D2R = solenoid('S4D2R', 4.93328000000000e-002, -4.64816459260000e-002, 'SolenoidPass');
S5D2R = solenoid('S5D2R', 4.93328000000000e-002, -4.53327176910000e-002, 'SolenoidPass');
S6D2R = solenoid('S6D2R', 4.93328000000000e-002, -4.27467855660000e-002, 'SolenoidPass');
S7D2R = solenoid('S7D2R', 4.93328000000000e-002, -3.71095400640000e-002, 'SolenoidPass');
S8D2R = solenoid('S8D2R', 4.93328000000000e-002, -2.71474679560000e-002, 'SolenoidPass');
S9D2R = solenoid('S9D2R', 4.93328000000000e-002, -1.69191868810000e-002, 'SolenoidPass');
S10D2R = solenoid('S10D2R', 4.93328000000000e-002, -9.53922148097000e-003, 'SolenoidPass');
S11D2R = solenoid('S11D2R', 4.93328000000000e-002, -4.30140636452000e-003, 'SolenoidPass');
S12D2R = solenoid('S12D2R', 4.93328000000000e-002, -1.54899340553000e-003, 'SolenoidPass');
S13D2R = solenoid('S13D2R', 4.93328000000000e-002, -5.48972470649000e-004, 'SolenoidPass');
S14D2R = solenoid('S14D2R', 4.93328000000000e-002, -1.98821481473000e-004, 'SolenoidPass');
S15D2R = solenoid('S15D2R', 2.46664000000000e-002, -8.18205021221000e-005, 'SolenoidPass');
SQF2AR = solenoid('SQF2AR', 1.93752500000000e-002, -7.19479180563000e-005, 'SolenoidPass');
SQF2AAR = solenoid('SQF2AAR', 3.87505000000000e-002, -3.85047483445000e-005, 'SolenoidPass');
SQF2ABR = solenoid('SQF2ABR', 3.87505000000000e-002, -2.28355709271000e-005, 'SolenoidPass');
SQF2BBR = solenoid('SQF2BBR', 3.87505000000000e-002, -1.55689481376000e-005, 'SolenoidPass');
SQF2BCR = solenoid('SQF2BCR', 3.87505000000000e-002, -1.18771696629000e-005, 'SolenoidPass');
SQF2CCR = solenoid('SQF2CCR', 3.87505000000000e-002, -9.95610846565000e-006, 'SolenoidPass');
SQF2CDR = solenoid('SQF2CDR', 3.87505000000000e-002, -9.18768398676000e-006, 'SolenoidPass');
SQF2DDR = solenoid('SQF2DDR', 3.87505000000000e-002, -9.25450350666000e-006, 'SolenoidPass');
SQF2DER = solenoid('SQF2DER', 3.87505000000000e-002, -9.88928894575000e-006, 'SolenoidPass');
SQF2EER = solenoid('SQF2EER', 3.87505000000000e-002, -1.08581719844000e-005, 'SolenoidPass');
SQF2EFR = solenoid('SQF2EFR', 3.87505000000000e-002, -1.19941038227000e-005, 'SolenoidPass');
SQF2FFR = solenoid('SQF2FFR', 3.87505000000000e-002, -1.32636747009000e-005, 'SolenoidPass');
SQF2FGR = solenoid('SQF2FGR', 3.87505000000000e-002, -1.46835894988000e-005, 'SolenoidPass');
SQF2GGR = solenoid('SQF2GGR', 3.87505000000000e-002, -1.62371433366000e-005, 'SolenoidPass');
SQF2GHR = solenoid('SQF2GHR', 3.87505000000000e-002, -1.78241069343000e-005, 'SolenoidPass');
SQF2HHR = solenoid('SQF2HHR', 3.87505000000000e-002, -1.94110705320000e-005, 'SolenoidPass');
SQF2HR = solenoid('SQF2HR', 1.93752500000000e-002, -2.07307560501000e-005, 'SolenoidPass');
SQF2AL = solenoid('SQF2AL', 1.93752500000000e-002, -4.15617413801000e-005, 'SolenoidPass');
SQF2AAL = solenoid('SQF2AAL', 3.87505000000000e-002, -3.39944307510000e-005, 'SolenoidPass');
SQF2ABL = solenoid('SQF2ABL', 3.87505000000000e-002, -2.44225345248000e-005, 'SolenoidPass');
SQF2BBL = solenoid('SQF2BBL', 3.87505000000000e-002, -1.51680310181000e-005, 'SolenoidPass');
SQF2BCL = solenoid('SQF2BCL', 3.87505000000000e-002, -7.51719598917000e-006, 'SolenoidPass');
SQF2CCL = solenoid('SQF2CCL', 3.87505000000000e-002, -3.17392719543000e-006, 'SolenoidPass');
SQF2CDL = solenoid('SQF2CDL', 3.87505000000000e-002, -2.80641983596000e-006, 'SolenoidPass');
SQF2DDL = solenoid('SQF2DDL', 3.87505000000000e-002, -5.67965919182000e-006, 'SolenoidPass');
SQF2DEL = solenoid('SQF2DEL', 3.87505000000000e-002, -1.00396328655000e-005, 'SolenoidPass');
SQF2EEL = solenoid('SQF2EEL', 3.87505000000000e-002, -1.39986894198000e-005, 'SolenoidPass');
SQF2EFL = solenoid('SQF2EFL', 3.87505000000000e-002, -1.64710116563000e-005, 'SolenoidPass');
SQF2FFL = solenoid('SQF2FFL', 3.87505000000000e-002, -1.75568288547000e-005, 'SolenoidPass');
SQF2FGL = solenoid('SQF2FGL', 3.87505000000000e-002, -1.81582045338000e-005, 'SolenoidPass');
SQF2GGL = solenoid('SQF2GGL', 3.87505000000000e-002, -1.89266290127000e-005, 'SolenoidPass');
SQF2GHL = solenoid('SQF2GHL', 3.87505000000000e-002, -1.93776607721000e-005, 'SolenoidPass');
SQF2HHL = solenoid('SQF2HHL', 3.87505000000000e-002, -1.86593509331000e-005, 'SolenoidPass');
SQF2HL = solenoid('SQF2HL', 1.93752500000000e-002, -1.81247947739000e-005, 'SolenoidPass');
VK00STR = corrector('VK00STR', 0.00000000000000e+000, [0.00000000000000e+000 6.69147856626000e-006],  'CorrectorPass');
VK01STR = corrector('VK01STR', 0.00000000000000e+000, [0.00000000000000e+000 -3.34193897638000e-005],  'CorrectorPass');
VK12STR = corrector('VK12STR', 0.00000000000000e+000, [0.00000000000000e+000 -2.67333568033000e-005],  'CorrectorPass');
VK23STR = corrector('VK23STR', 0.00000000000000e+000, [0.00000000000000e+000 -4.00835346354000e-005],  'CorrectorPass');
VK34STR = corrector('VK34STR', 0.00000000000000e+000, [0.00000000000000e+000 -2.00473861677000e-005],  'CorrectorPass');
VKSTB1AR = corrector('VKSTB1AR', 0.00000000000000e+000, [0.00000000000000e+000 8.57859626592000e-006],  'CorrectorPass');
VK00STL = corrector('VK00STL', 0.00000000000000e+000, [0.00000000000000e+000 6.69147856626000e-006],  'CorrectorPass');
VK01STL = corrector('VK01STL', 0.00000000000000e+000, [0.00000000000000e+000 -3.34350449793000e-005],  'CorrectorPass');
VK12STL = corrector('VK12STL', 0.00000000000000e+000, [0.00000000000000e+000 -2.67594671229000e-005],  'CorrectorPass');
VK23STL = corrector('VK23STL', 0.00000000000000e+000, [0.00000000000000e+000 -4.01311850107000e-005],  'CorrectorPass');
VK34STL = corrector('VK34STL', 0.00000000000000e+000, [0.00000000000000e+000 -2.00673729757000e-005],  'CorrectorPass');
VKSTB1AL = corrector('VKSTB1AL', 0.00000000000000e+000, [0.00000000000000e+000 8.58479671645000e-006],  'CorrectorPass');
VKB1AR = corrector('VKB1AR', 0.00000000000000e+000, [0.00000000000000e+000 -8.24282322855000e-006],  'CorrectorPass');
VKB1BR = corrector('VKB1BR', 0.00000000000000e+000, [0.00000000000000e+000 -1.38978141943000e-005],  'CorrectorPass');
VKB1CR = corrector('VKB1CR', 0.00000000000000e+000, [0.00000000000000e+000 -1.25239857037000e-005],  'CorrectorPass');
VKB1DR = corrector('VKB1DR', 0.00000000000000e+000, [0.00000000000000e+000 -1.22809410235000e-005],  'CorrectorPass');
VKB1ER = corrector('VKB1ER', 0.00000000000000e+000, [0.00000000000000e+000 -1.20092545818000e-005],  'CorrectorPass');
VKB1FR = corrector('VKB1FR', 0.00000000000000e+000, [0.00000000000000e+000 -8.81899653337000e-006],  'CorrectorPass');
VKB1GR = corrector('VKB1GR', 0.00000000000000e+000, [0.00000000000000e+000 -2.51799387253000e-005],  'CorrectorPass');
VKB1HR = corrector('VKB1HR', 0.00000000000000e+000, [0.00000000000000e+000 -2.06688436478000e-005],  'CorrectorPass');
VKB1IR = corrector('VKB1IR', 0.00000000000000e+000, [0.00000000000000e+000 -1.89701525759000e-005],  'CorrectorPass');
VKB1JR = corrector('VKB1JR', 0.00000000000000e+000, [0.00000000000000e+000 -1.72583958049000e-005],  'CorrectorPass');
VKB1KR = corrector('VKB1KR', 0.00000000000000e+000, [0.00000000000000e+000 -1.69900298657000e-005],  'CorrectorPass');
VKB1P1R = corrector('VKB1P1R', 0.00000000000000e+000, [0.00000000000000e+000 -9.10010205753000e-006],  'CorrectorPass');
VKYAN1R = corrector('VKYAN1R', 0.00000000000000e+000, [0.00000000000000e+000 3.43279953605000e-006],  'CorrectorPass');
VKB1LR = corrector('VKB1LR', 0.00000000000000e+000, [0.00000000000000e+000 -5.10861458910000e-006],  'CorrectorPass');
VKB1MR = corrector('VKB1MR', 0.00000000000000e+000, [0.00000000000000e+000 -1.54547891333000e-005],  'CorrectorPass');
VKB1AL = corrector('VKB1AL', 0.00000000000000e+000, [0.00000000000000e+000 -8.24729282924000e-006],  'CorrectorPass');
VKB1BL = corrector('VKB1BL', 0.00000000000000e+000, [0.00000000000000e+000 -1.39025905578000e-005],  'CorrectorPass');
VKB1CL = corrector('VKB1CL', 0.00000000000000e+000, [0.00000000000000e+000 -1.25249087809000e-005],  'CorrectorPass');
VKB1DL = corrector('VKB1DL', 0.00000000000000e+000, [0.00000000000000e+000 -1.22778644057000e-005],  'CorrectorPass');
VKB1EL = corrector('VKB1EL', 0.00000000000000e+000, [0.00000000000000e+000 -1.20017750782000e-005],  'CorrectorPass');
VKB1FL = corrector('VKB1FL', 0.00000000000000e+000, [0.00000000000000e+000 -8.80926938457000e-006],  'CorrectorPass');
VKB1GL = corrector('VKB1GL', 0.00000000000000e+000, [0.00000000000000e+000 -2.51323679101000e-005],  'CorrectorPass');
VKB1HL = corrector('VKB1HL', 0.00000000000000e+000, [0.00000000000000e+000 -2.06019929475000e-005],  'CorrectorPass');
VKB1IL = corrector('VKB1IL', 0.00000000000000e+000, [0.00000000000000e+000 -1.88691031609000e-005],  'CorrectorPass');
VKB1JL = corrector('VKB1JL', 0.00000000000000e+000, [0.00000000000000e+000 -1.71172006206000e-005],  'CorrectorPass');
VKB1KL = corrector('VKB1KL', 0.00000000000000e+000, [0.00000000000000e+000 -1.67940279777000e-005],  'CorrectorPass');
VKB1P1L = corrector('VKB1P1L', 0.00000000000000e+000, [0.00000000000000e+000 -8.96784838258000e-006],  'CorrectorPass');
VKYAN1L = corrector('VKYAN1L', 0.00000000000000e+000, [0.00000000000000e+000 3.37670527992000e-006],  'CorrectorPass');
VKB1LL = corrector('VKB1LL', 0.00000000000000e+000, [0.00000000000000e+000 -5.01712193072000e-006],  'CorrectorPass');
VKB1ML = corrector('VKB1ML', 0.00000000000000e+000, [0.00000000000000e+000 -1.51406526051000e-005],  'CorrectorPass');
VKB1D1AR = corrector('VKB1D1AR', 0.00000000000000e+000, [0.00000000000000e+000 1.82413317935000e-007],  'CorrectorPass');
VKD1AD1BR = corrector('VKD1AD1BR', 0.00000000000000e+000, [0.00000000000000e+000 2.46315560243000e-007],  'CorrectorPass');
VKB1D1AL = corrector('VKB1D1AL', 0.00000000000000e+000, [0.00000000000000e+000 1.84220902119000e-007],  'CorrectorPass');
VKD1AD1BL = corrector('VKD1AD1BL', 0.00000000000000e+000, [0.00000000000000e+000 2.33508468822000e-007],  'CorrectorPass');
VK01D1BR = corrector('VK01D1BR', 0.00000000000000e+000, [0.00000000000000e+000 -1.35052636789000e-005],  'CorrectorPass');
VK12D1BR = corrector('VK12D1BR', 0.00000000000000e+000, [0.00000000000000e+000 -1.08227296152000e-005],  'CorrectorPass');
VK23D1BR = corrector('VK23D1BR', 0.00000000000000e+000, [0.00000000000000e+000 -1.08155663073000e-005],  'CorrectorPass');
VK34D1BR = corrector('VK34D1BR', 0.00000000000000e+000, [0.00000000000000e+000 -1.35234921490000e-005],  'CorrectorPass');
VKD1BQ1R = corrector('VKD1BQ1R', 0.00000000000000e+000, [0.00000000000000e+000 5.64659466327000e-006],  'CorrectorPass');
VK01D1BL = corrector('VK01D1BL', 0.00000000000000e+000, [0.00000000000000e+000 -1.31106849815000e-005],  'CorrectorPass');
VK12D1BL = corrector('VK12D1BL', 0.00000000000000e+000, [0.00000000000000e+000 -1.04468711847000e-005],  'CorrectorPass');
VK23D1BL = corrector('VK23D1BL', 0.00000000000000e+000, [0.00000000000000e+000 -1.03652288423000e-005],  'CorrectorPass');
VK34D1BL = corrector('VK34D1BL', 0.00000000000000e+000, [0.00000000000000e+000 -1.28689298970000e-005],  'CorrectorPass');
VKD1BQ1L = corrector('VKD1BQ1L', 0.00000000000000e+000, [0.00000000000000e+000 5.34154984229000e-006],  'CorrectorPass');
MQ1AAR = multipole('MQ1AAR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-5.15360821528886e-009 -2.01778452820000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ABR = multipole('MQ1ABR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-4.98692927172340e-009 -2.01778452820000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ACR = multipole('MQ1ACR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-4.82531178298872e-009 -2.01778452820000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ADR = multipole('MQ1ADR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-4.66875574908483e-009 -2.01778452820000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AER = multipole('MQ1AER', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-4.51673757123613e-009 -2.01778452820000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AFR = multipole('MQ1AFR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-4.36943178236780e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AGR = multipole('MQ1AGR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-4.22666384955467e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1P2R = multipole('MQ1P2R', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-8.28507795921708e-010 -4.03548834658000e-003 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AHR = multipole('MQ1AHR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-3.25957691102461e-009 -1.61419533860000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AIR = multipole('MQ1AIR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-3.95369435454275e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AJR = multipole('MQ1AJR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-3.82349279234398e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AKR = multipole('MQ1AKR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-3.69695642157439e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ALR = multipole('MQ1ALR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-3.57425977515919e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AMR = multipole('MQ1AMR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-3.45522832017317e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ANR = multipole('MQ1ANR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-3.33968752369115e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AOR = multipole('MQ1AOR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-3.22763738571311e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1APR = multipole('MQ1APR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-3.11872884038867e-009 -2.01774417330000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BAR = multipole('MQ1BAR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [6.30482738990432e-009 -1.75583023380000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BBR = multipole('MQ1BBR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [6.40274036094120e-009 -1.75583023380000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BCR = multipole('MQ1BCR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [6.50658745143486e-009 -1.75583023380000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1P3R = multipole('MQ1P3R', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [5.28380977748763e-009 -1.40466418710000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BDR = multipole('MQ1BDR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [1.33220981804727e-009 -3.51166046767000e-003 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BER = multipole('MQ1BER', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [6.73138585909173e-009 -1.75583023380000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BFR = multipole('MQ1BFR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [1.78791528574299e-009 -4.72748103319000e-003 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BGR = multipole('MQ1BGR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [1.81671321840090e-009 -4.72748103319000e-003 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AAL = multipole('MQ1AAL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [5.15360821528886e-009 -2.03293421610000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ABL = multipole('MQ1ABL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [4.98692927172340e-009 -2.03293421610000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ACL = multipole('MQ1ACL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [4.82531178298872e-009 -2.03293421610000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ADL = multipole('MQ1ADL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [4.66875574908483e-009 -2.03293421610000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AEL = multipole('MQ1AEL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [4.51673757123613e-009 -2.03293421610000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AFL = multipole('MQ1AFL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [4.36943178236780e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AGL = multipole('MQ1AGL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [4.22666384955467e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1P2L = multipole('MQ1P2L', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [8.28507795921708e-010 -4.06578711654000e-003 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AHL = multipole('MQ1AHL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [3.25957691102461e-009 -1.62631484660000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AIL = multipole('MQ1AIL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [3.95369435454275e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AJL = multipole('MQ1AJL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [3.82349279234398e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AKL = multipole('MQ1AKL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [3.69695642157439e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ALL = multipole('MQ1ALL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [3.57425977515919e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AML = multipole('MQ1AML', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [3.45522832017317e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1ANL = multipole('MQ1ANL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [3.33968752369115e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1AOL = multipole('MQ1AOL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [3.22763738571311e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1APL = multipole('MQ1APL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [3.11872884038867e-009 -2.03289355830000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BAL = multipole('MQ1BAL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-6.30482738990432e-009 -1.77744076120000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BBL = multipole('MQ1BBL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-6.40274036094120e-009 -1.77744076120000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BCL = multipole('MQ1BCL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-6.50658745143486e-009 -1.77744076120000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1P3L = multipole('MQ1P3L', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-5.28380977748763e-009 -1.42195260900000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BDL = multipole('MQ1BDL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-1.33220981804727e-009 -3.55488152238000e-003 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BEL = multipole('MQ1BEL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-6.73138585909173e-009 -1.77744076120000e-002 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BFL = multipole('MQ1BFL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-1.78791528574299e-009 -4.38001952969000e-003 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQ1BGL = multipole('MQ1BGL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [-1.81671321840090e-009 -4.38001952969000e-003 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
HKQ1AAR = corrector('HKQ1AAR', 0.00000000000000e+000, [-3.09995999283000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1ABR = corrector('HKQ1ABR', 0.00000000000000e+000, [-2.99970051731000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1ACR = corrector('HKQ1ACR', 0.00000000000000e+000, [-2.90248557037000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1ADR = corrector('HKQ1ADR', 0.00000000000000e+000, [-2.80831515200000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1AER = corrector('HKQ1AER', 0.00000000000000e+000, [-2.71687431098000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1AFR = corrector('HKQ1AFR', 0.00000000000000e+000, [-2.62826803104000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1AGR = corrector('HKQ1AGR', 0.00000000000000e+000, [-2.54239132845000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1P2R = corrector('HKQ1P2R', 0.00000000000000e+000, [-4.98357832768000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AHR = corrector('HKQ1AHR', 0.00000000000000e+000, [-1.96067640294000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1AIR = corrector('HKQ1AIR', 0.00000000000000e+000, [-2.37819675283000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1AJR = corrector('HKQ1AJR', 0.00000000000000e+000, [-2.29987887981000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1AKR = corrector('HKQ1AKR', 0.00000000000000e+000, [-2.22376566541000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1ALR = corrector('HKQ1ALR', 0.00000000000000e+000, [-2.14996209338000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1AMR = corrector('HKQ1AMR', 0.00000000000000e+000, [-2.07836317997000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1ANR = corrector('HKQ1ANR', 0.00000000000000e+000, [-2.00886394144000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1AOR = corrector('HKQ1AOR', 0.00000000000000e+000, [-1.94146437779000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1APR = corrector('HKQ1APR', 0.00000000000000e+000, [-1.87595452154000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1BAR = corrector('HKQ1BAR', 0.00000000000000e+000, [3.79243276826000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1BBR = corrector('HKQ1BBR', 0.00000000000000e+000, [3.85132864864000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1BCR = corrector('HKQ1BCR', 0.00000000000000e+000, [3.91379397632000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1P3R = corrector('HKQ1P3R', 0.00000000000000e+000, [3.17827786586000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1BDR = corrector('HKQ1BDR', 0.00000000000000e+000, [8.01340917952000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1BER = corrector('HKQ1BER', 0.00000000000000e+000, [4.04901303859000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1AAL = corrector('HKQ1AAL', 0.00000000000000e+000, [1.09904375889000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1ABL = corrector('HKQ1ABL', 0.00000000000000e+000, [1.06349828376000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1ACL = corrector('HKQ1ACL', 0.00000000000000e+000, [1.02903220002000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1ADL = corrector('HKQ1ADL', 0.00000000000000e+000, [9.95645507668000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AEL = corrector('HKQ1AEL', 0.00000000000000e+000, [9.63226545530000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AFL = corrector('HKQ1AFL', 0.00000000000000e+000, [9.31812533998000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AGL = corrector('HKQ1AGL', 0.00000000000000e+000, [9.01366252680000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1P2L = corrector('HKQ1P2L', 0.00000000000000e+000, [1.76685204669000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AHL = corrector('HKQ1AHL', 0.00000000000000e+000, [6.95128056120000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AIL = corrector('HKQ1AIL', 0.00000000000000e+000, [8.43153558325000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AJL = corrector('HKQ1AJL', 0.00000000000000e+000, [8.15387145289000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AKL = corrector('HKQ1AKL', 0.00000000000000e+000, [7.88402360501000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1ALL = corrector('HKQ1ALL', 0.00000000000000e+000, [7.62236424356000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AML = corrector('HKQ1AML', 0.00000000000000e+000, [7.36852116460000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1ANL = corrector('HKQ1ANL', 0.00000000000000e+000, [7.12212216419000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1AOL = corrector('HKQ1AOL', 0.00000000000000e+000, [6.88316724235000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1APL = corrector('HKQ1APL', 0.00000000000000e+000, [6.65091199122000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1BAL = corrector('HKQ1BAL', 0.00000000000000e+000, [-1.34454946987000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1BBL = corrector('HKQ1BBL', 0.00000000000000e+000, [-1.36543011023000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1BCL = corrector('HKQ1BCL', 0.00000000000000e+000, [-1.38757624396000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1P3L = corrector('HKQ1P3L', 0.00000000000000e+000, [-1.12681017193000e-006 0.00000000000000e+000],  'CorrectorPass');
HKQ1BDL = corrector('HKQ1BDL', 0.00000000000000e+000, [-2.84103258319000e-007 0.00000000000000e+000],  'CorrectorPass');
HKQ1BEL = corrector('HKQ1BEL', 0.00000000000000e+000, [-1.43551610990000e-006 0.00000000000000e+000],  'CorrectorPass');
VKD1AAR = corrector('VKD1AAR', 0.00000000000000e+000, [0.00000000000000e+000 -1.45208771218000e-005],  'CorrectorPass');
VKD1ABR = corrector('VKD1ABR', 0.00000000000000e+000, [0.00000000000000e+000 -1.12286497954000e-005],  'CorrectorPass');
VKD1ACR = corrector('VKD1ACR', 0.00000000000000e+000, [0.00000000000000e+000 -1.08769607444000e-005],  'CorrectorPass');
VKD1ADR = corrector('VKD1ADR', 0.00000000000000e+000, [0.00000000000000e+000 -1.05212995013000e-005],  'CorrectorPass');
VKD1AER = corrector('VKD1AER', 0.00000000000000e+000, [0.00000000000000e+000 -1.01982366885000e-005],  'CorrectorPass');
VKD1AFR = corrector('VKD1AFR', 0.00000000000000e+000, [0.00000000000000e+000 -9.88153510765000e-006],  'CorrectorPass');
VKD1AGR = corrector('VKD1AGR', 0.00000000000000e+000, [0.00000000000000e+000 -1.14365838105000e-005],  'CorrectorPass');
VKD1P2R = corrector('VKD1P2R', 0.00000000000000e+000, [0.00000000000000e+000 -4.60372620183000e-007],  'CorrectorPass');
VKYAN2R = corrector('VKYAN2R', 0.00000000000000e+000, [0.00000000000000e+000 2.33797533569000e-006],  'CorrectorPass');
VKD1AHR = corrector('VKD1AHR', 0.00000000000000e+000, [0.00000000000000e+000 -8.77834208481000e-006],  'CorrectorPass');
VKD1AIR = corrector('VKD1AIR', 0.00000000000000e+000, [0.00000000000000e+000 -9.40255799948000e-006],  'CorrectorPass');
VKD1AJR = corrector('VKD1AJR', 0.00000000000000e+000, [0.00000000000000e+000 -8.65741194450000e-006],  'CorrectorPass');
VKD1AKR = corrector('VKD1AKR', 0.00000000000000e+000, [0.00000000000000e+000 -8.37751897419000e-006],  'CorrectorPass');
VKD1ALR = corrector('VKD1ALR', 0.00000000000000e+000, [0.00000000000000e+000 -8.10103030852000e-006],  'CorrectorPass');
VKD1AMR = corrector('VKD1AMR', 0.00000000000000e+000, [0.00000000000000e+000 -7.82785613051000e-006],  'CorrectorPass');
VKD1ANR = corrector('VKD1ANR', 0.00000000000000e+000, [0.00000000000000e+000 -7.55816374319000e-006],  'CorrectorPass');
VKD1AOR = corrector('VKD1AOR', 0.00000000000000e+000, [0.00000000000000e+000 -7.30450732455000e-006],  'CorrectorPass');
VKD1APR = corrector('VKD1APR', 0.00000000000000e+000, [0.00000000000000e+000 -8.79811654362000e-006],  'CorrectorPass');
VKD1PBR = corrector('VKD1PBR', 0.00000000000000e+000, [0.00000000000000e+000 3.47332762330000e-006],  'CorrectorPass');
VKD1BAR = corrector('VKD1BAR', 0.00000000000000e+000, [0.00000000000000e+000 -8.87114610268000e-006],  'CorrectorPass');
VKD1BBR = corrector('VKD1BBR', 0.00000000000000e+000, [0.00000000000000e+000 -7.56240350912000e-006],  'CorrectorPass');
VKD1BCR = corrector('VKD1BCR', 0.00000000000000e+000, [0.00000000000000e+000 -8.38129295083000e-006],  'CorrectorPass');
VKD1P3R = corrector('VKD1P3R', 0.00000000000000e+000, [0.00000000000000e+000 -7.98849584326000e-006],  'CorrectorPass');
VKYAN3R = corrector('VKYAN3R', 0.00000000000000e+000, [0.00000000000000e+000 2.13365579587000e-006],  'CorrectorPass');
VKD1BDR = corrector('VKD1BDR', 0.00000000000000e+000, [0.00000000000000e+000 -4.14838332442000e-007],  'CorrectorPass');
VKD1BER = corrector('VKD1BER', 0.00000000000000e+000, [0.00000000000000e+000 -1.09869750568000e-005],  'CorrectorPass');
VKD1BFR = corrector('VKD1BFR', 0.00000000000000e+000, [0.00000000000000e+000 -9.98193660302000e-006],  'CorrectorPass');
VKD1BGR = corrector('VKD1BGR', 0.00000000000000e+000, [0.00000000000000e+000 -1.19410788056000e-005],  'CorrectorPass');
VKD1AAL = corrector('VKD1AAL', 0.00000000000000e+000, [0.00000000000000e+000 -1.36421059631000e-005],  'CorrectorPass');
VKD1ABL = corrector('VKD1ABL', 0.00000000000000e+000, [0.00000000000000e+000 -1.04409250948000e-005],  'CorrectorPass');
VKD1ACL = corrector('VKD1ACL', 0.00000000000000e+000, [0.00000000000000e+000 -9.98742665700000e-006],  'CorrectorPass');
VKD1ADL = corrector('VKD1ADL', 0.00000000000000e+000, [0.00000000000000e+000 -9.52725051952000e-006],  'CorrectorPass');
VKD1AEL = corrector('VKD1AEL', 0.00000000000000e+000, [0.00000000000000e+000 -9.08923990163000e-006],  'CorrectorPass');
VKD1AFL = corrector('VKD1AFL', 0.00000000000000e+000, [0.00000000000000e+000 -8.64626797155000e-006],  'CorrectorPass');
VKD1AGL = corrector('VKD1AGL', 0.00000000000000e+000, [0.00000000000000e+000 -9.81712309380000e-006],  'CorrectorPass');
VKD1P2L = corrector('VKD1P2L', 0.00000000000000e+000, [0.00000000000000e+000 -3.89822539079000e-007],  'CorrectorPass');
VKYAN2L = corrector('VKYAN2L', 0.00000000000000e+000, [0.00000000000000e+000 1.96412916335000e-006],  'CorrectorPass');
VKD1AHL = corrector('VKD1AHL', 0.00000000000000e+000, [0.00000000000000e+000 -7.28115445112000e-006],  'CorrectorPass');
VKD1AIL = corrector('VKD1AIL', 0.00000000000000e+000, [0.00000000000000e+000 -7.60499801774000e-006],  'CorrectorPass');
VKD1AJL = corrector('VKD1AJL', 0.00000000000000e+000, [0.00000000000000e+000 -6.75784769739000e-006],  'CorrectorPass');
VKD1AKL = corrector('VKD1AKL', 0.00000000000000e+000, [0.00000000000000e+000 -6.26099812058000e-006],  'CorrectorPass');
VKD1ALL = corrector('VKD1ALL', 0.00000000000000e+000, [0.00000000000000e+000 -5.74399614912000e-006],  'CorrectorPass');
VKD1AML = corrector('VKD1AML', 0.00000000000000e+000, [0.00000000000000e+000 -5.20623523053000e-006],  'CorrectorPass');
VKD1ANL = corrector('VKD1ANL', 0.00000000000000e+000, [0.00000000000000e+000 -4.65117750901000e-006],  'CorrectorPass');
VKD1AOL = corrector('VKD1AOL', 0.00000000000000e+000, [0.00000000000000e+000 -4.09302008554000e-006],  'CorrectorPass');
VKD1APL = corrector('VKD1APL', 0.00000000000000e+000, [0.00000000000000e+000 -4.47281568853000e-006],  'CorrectorPass');
VKD1PBL = corrector('VKD1PBL', 0.00000000000000e+000, [0.00000000000000e+000 1.62990005884000e-006],  'CorrectorPass');
VKD1BAL = corrector('VKD1BAL', 0.00000000000000e+000, [0.00000000000000e+000 -3.80154660285000e-006],  'CorrectorPass');
VKD1BBL = corrector('VKD1BBL', 0.00000000000000e+000, [0.00000000000000e+000 -2.81924568773000e-006],  'CorrectorPass');
VKD1BCL = corrector('VKD1BCL', 0.00000000000000e+000, [0.00000000000000e+000 -2.62985999361000e-006],  'CorrectorPass');
VKD1P3L = corrector('VKD1P3L', 0.00000000000000e+000, [0.00000000000000e+000 -2.14519952868000e-006],  'CorrectorPass');
VKYAN3L = corrector('VKYAN3L', 0.00000000000000e+000, [0.00000000000000e+000 5.22002596448000e-007],  'CorrectorPass');
VKD1BDL = corrector('VKD1BDL', 0.00000000000000e+000, [0.00000000000000e+000 -9.50329003094000e-008],  'CorrectorPass');
VKD1BEL = corrector('VKD1BEL', 0.00000000000000e+000, [0.00000000000000e+000 -2.18714670498000e-006],  'CorrectorPass');
VKD1BFL = corrector('VKD1BFL', 0.00000000000000e+000, [0.00000000000000e+000 -1.59945686072000e-006],  'CorrectorPass');
VKD1BGL = corrector('VKD1BGL', 0.00000000000000e+000, [0.00000000000000e+000 -1.51369950206000e-006],  'CorrectorPass');
VKQ1D2R = corrector('VKQ1D2R', 0.00000000000000e+000, [0.00000000000000e+000 4.56730154735000e-006],  'CorrectorPass');
VK01D2R = corrector('VK01D2R', 0.00000000000000e+000, [0.00000000000000e+000 -1.13293460339000e-005],  'CorrectorPass');
VK12D2R = corrector('VK12D2R', 0.00000000000000e+000, [0.00000000000000e+000 -9.03345293837000e-006],  'CorrectorPass');
VK23D2R = corrector('VK23D2R', 0.00000000000000e+000, [0.00000000000000e+000 -8.99332104893000e-006],  'CorrectorPass');
VK34D2R = corrector('VK34D2R', 0.00000000000000e+000, [0.00000000000000e+000 -8.92234472629000e-006],  'CorrectorPass');
VK45D2R = corrector('VK45D2R', 0.00000000000000e+000, [0.00000000000000e+000 -8.76481358511000e-006],  'CorrectorPass');
VK56D2R = corrector('VK56D2R', 0.00000000000000e+000, [0.00000000000000e+000 -8.40827509229000e-006],  'CorrectorPass');
VK67D2R = corrector('VK67D2R', 0.00000000000000e+000, [0.00000000000000e+000 -7.62327135065000e-006],  'CorrectorPass');
VK78D2R = corrector('VK78D2R', 0.00000000000000e+000, [0.00000000000000e+000 -6.13412405914000e-006],  'CorrectorPass');
VK89D2R = corrector('VK89D2R', 0.00000000000000e+000, [0.00000000000000e+000 -4.20670578933000e-006],  'CorrectorPass');
VK910D2R = corrector('VK910D2R', 0.00000000000000e+000, [0.00000000000000e+000 -2.52578145639000e-006],  'CorrectorPass');
VK1011D2R = corrector('VK1011D2R', 0.00000000000000e+000, [0.00000000000000e+000 -1.32298873767000e-006],  'CorrectorPass');
VK1112D2R = corrector('VK1112D2R', 0.00000000000000e+000, [0.00000000000000e+000 -5.59224125746000e-007],  'CorrectorPass');
VK1213D2R = corrector('VK1213D2R', 0.00000000000000e+000, [0.00000000000000e+000 -2.00276722381000e-007],  'CorrectorPass');
VK1314D2R = corrector('VK1314D2R', 0.00000000000000e+000, [0.00000000000000e+000 -7.13861571573000e-008],  'CorrectorPass');
VK1415D2R = corrector('VK1415D2R', 0.00000000000000e+000, [0.00000000000000e+000 -3.34910665573000e-008],  'CorrectorPass');
VKD2F2R = corrector('VKD2F2R', 0.00000000000000e+000, [0.00000000000000e+000 6.55437891011000e-009],  'CorrectorPass');
VKQ1D2L = corrector('VKQ1D2L', 0.00000000000000e+000, [0.00000000000000e+000 4.86053473400000e-007],  'CorrectorPass');
VK01D2L = corrector('VK01D2L', 0.00000000000000e+000, [0.00000000000000e+000 -1.03442142852000e-006],  'CorrectorPass');
VK12D2L = corrector('VK12D2L', 0.00000000000000e+000, [0.00000000000000e+000 -6.55945734298000e-007],  'CorrectorPass');
VK23D2L = corrector('VK23D2L', 0.00000000000000e+000, [0.00000000000000e+000 -4.90361424493000e-007],  'CorrectorPass');
VK34D2L = corrector('VK34D2L', 0.00000000000000e+000, [0.00000000000000e+000 -3.61065808807000e-007],  'CorrectorPass');
VK45D2L = corrector('VK45D2L', 0.00000000000000e+000, [0.00000000000000e+000 -2.63920674847000e-007],  'CorrectorPass');
VK56D2L = corrector('VK56D2L', 0.00000000000000e+000, [0.00000000000000e+000 -1.92317640277000e-007],  'CorrectorPass');
VK67D2L = corrector('VK67D2L', 0.00000000000000e+000, [0.00000000000000e+000 -1.39766329589000e-007],  'CorrectorPass');
VK78D2L = corrector('VK78D2L', 0.00000000000000e+000, [0.00000000000000e+000 -1.01281751667000e-007],  'CorrectorPass');
VK89D2L = corrector('VK89D2L', 0.00000000000000e+000, [0.00000000000000e+000 -7.33173229413000e-008],  'CorrectorPass');
VK910D2L = corrector('VK910D2L', 0.00000000000000e+000, [0.00000000000000e+000 -5.31604810677000e-008],  'CorrectorPass');
VK1011D2L = corrector('VK1011D2L', 0.00000000000000e+000, [0.00000000000000e+000 -3.86307767786000e-008],  'CorrectorPass');
VK1112D2L = corrector('VK1112D2L', 0.00000000000000e+000, [0.00000000000000e+000 -2.79467554738000e-008],  'CorrectorPass');
VK1213D2L = corrector('VK1213D2L', 0.00000000000000e+000, [0.00000000000000e+000 -2.01456790655000e-008],  'CorrectorPass');
VK1314D2L = corrector('VK1314D2L', 0.00000000000000e+000, [0.00000000000000e+000 -1.45754378737000e-008],  'CorrectorPass');
VK1415D2L = corrector('VK1415D2L', 0.00000000000000e+000, [0.00000000000000e+000 -1.35040764797000e-008],  'CorrectorPass');
VKD2F2L = corrector('VKD2F2L', 0.00000000000000e+000, [0.00000000000000e+000 3.86071074966000e-009],  'CorrectorPass');
MQF2AR = multipole('MQF2AR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2BR = multipole('MQF2BR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2CR = multipole('MQF2CR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2DR = multipole('MQF2DR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2ER = multipole('MQF2ER', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2FR = multipole('MQF2FR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2GR = multipole('MQF2GR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2HR = multipole('MQF2HR', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2AL = multipole('MQF2AL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2BL = multipole('MQF2BL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2CL = multipole('MQF2CL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2DL = multipole('MQF2DL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2EL = multipole('MQF2EL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2FL = multipole('MQF2FL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2GL = multipole('MQF2GL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
MQF2HL = multipole('MQF2HL', 0.00000000000000e+000, [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], [0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000 0.00000000000000e+000], 'ThinMPolePass');
VK1F2AR = corrector('VK1F2AR', 0.00000000000000e+000, [0.00000000000000e+000 -1.03548613124000e-008],  'CorrectorPass');
VK2F2AR = corrector('VK2F2AR', 0.00000000000000e+000, [0.00000000000000e+000 -4.60048164815000e-009],  'CorrectorPass');
VK1F2BR = corrector('VK1F2BR', 0.00000000000000e+000, [0.00000000000000e+000 -2.88031244801000e-009],  'CorrectorPass');
VK2F2BR = corrector('VK2F2BR', 0.00000000000000e+000, [0.00000000000000e+000 -2.05843990956000e-009],  'CorrectorPass');
VK1F2CR = corrector('VK1F2CR', 0.00000000000000e+000, [0.00000000000000e+000 -1.63748080450000e-009],  'CorrectorPass');
VK2F2CR = corrector('VK2F2CR', 0.00000000000000e+000, [0.00000000000000e+000 -1.43577123333000e-009],  'CorrectorPass');
VK1F2DR = corrector('VK1F2DR', 0.00000000000000e+000, [0.00000000000000e+000 -1.38315134520000e-009],  'CorrectorPass');
VK2F2DR = corrector('VK2F2DR', 0.00000000000000e+000, [0.00000000000000e+000 -1.43577123333000e-009],  'CorrectorPass');
VK1F2ER = corrector('VK1F2ER', 0.00000000000000e+000, [0.00000000000000e+000 -1.55604526335000e-009],  'CorrectorPass');
VK2F2ER = corrector('VK2F2ER', 0.00000000000000e+000, [0.00000000000000e+000 -1.71390492774000e-009],  'CorrectorPass');
VK1F2FR = corrector('VK1F2FR', 0.00000000000000e+000, [0.00000000000000e+000 -1.89431597277000e-009],  'CorrectorPass');
VK2F2FR = corrector('VK2F2FR', 0.00000000000000e+000, [0.00000000000000e+000 -2.09602554394000e-009],  'CorrectorPass');
VK1F2GR = corrector('VK1F2GR', 0.00000000000000e+000, [0.00000000000000e+000 -2.31903364127000e-009],  'CorrectorPass');
VK2F2GR = corrector('VK2F2GR', 0.00000000000000e+000, [0.00000000000000e+000 -2.55457028338000e-009],  'CorrectorPass');
VK1F2HR = corrector('VK1F2HR', 0.00000000000000e+000, [0.00000000000000e+000 -2.79261263446000e-009],  'CorrectorPass');
VK2F2HR = corrector('VK2F2HR', 0.00000000000000e+000, [0.00000000000000e+000 -3.76326856228000e-009],  'CorrectorPass');
VK1F2AL = corrector('VK1F2AL', 0.00000000000000e+000, [0.00000000000000e+000 -7.08333903753000e-009],  'CorrectorPass');
VK2F2AL = corrector('VK2F2AL', 0.00000000000000e+000, [0.00000000000000e+000 -4.38123211427000e-009],  'CorrectorPass');
VK1F2BL = corrector('VK1F2BL', 0.00000000000000e+000, [0.00000000000000e+000 -2.96926511605000e-009],  'CorrectorPass');
VK2F2BL = corrector('VK2F2BL', 0.00000000000000e+000, [0.00000000000000e+000 -1.70137638295000e-009],  'CorrectorPass');
VK1F2CL = corrector('VK1F2CL', 0.00000000000000e+000, [0.00000000000000e+000 -8.01826866781000e-010],  'CorrectorPass');
VK2F2CL = corrector('VK2F2CL', 0.00000000000000e+000, [0.00000000000000e+000 -4.48521903605000e-010],  'CorrectorPass');
VK1F2DL = corrector('VK1F2DL', 0.00000000000000e+000, [0.00000000000000e+000 -6.36450075507000e-010],  'CorrectorPass');
VK2F2DL = corrector('VK2F2DL', 0.00000000000000e+000, [0.00000000000000e+000 -1.17893606506000e-009],  'CorrectorPass');
VK1F2EL = corrector('VK1F2EL', 0.00000000000000e+000, [0.00000000000000e+000 -1.80285759578000e-009],  'CorrectorPass');
VK2F2EL = corrector('VK2F2EL', 0.00000000000000e+000, [0.00000000000000e+000 -2.28520657032000e-009],  'CorrectorPass');
VK1F2FL = corrector('VK1F2FL', 0.00000000000000e+000, [0.00000000000000e+000 -2.55206457443000e-009],  'CorrectorPass');
VK2F2FL = corrector('VK2F2FL', 0.00000000000000e+000, [0.00000000000000e+000 -2.67860287684000e-009],  'CorrectorPass');
VK1F2GL = corrector('VK1F2GL', 0.00000000000000e+000, [0.00000000000000e+000 -2.78133694415000e-009],  'CorrectorPass');
VK2F2GL = corrector('VK2F2GL', 0.00000000000000e+000, [0.00000000000000e+000 -2.87279532114000e-009],  'CorrectorPass');
VK1F2HL = corrector('VK1F2HL', 0.00000000000000e+000, [0.00000000000000e+000 -2.85274964947000e-009],  'CorrectorPass');
VK2F2HL = corrector('VK2F2HL', 0.00000000000000e+000, [0.00000000000000e+000 -3.44848829552000e-009],  'CorrectorPass');
IP = marker('IP', 'IdentityPass');
IP1M = marker('IP1M', 'IdentityPass');
IP2M = marker('IP2M', 'IdentityPass');
X878022T = corrector('X878022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X878042T = corrector('X878042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X879022T = corrector('X879022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X879042T = corrector('X879042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X879062T = corrector('X879062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X879082T = corrector('X879082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X879102T = corrector('X879102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X879122T = corrector('X879122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X879142T = corrector('X879142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X879162T = corrector('X879162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X996022T = corrector('X996022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X996042T = corrector('X996042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X996062T = corrector('X996062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X996082T = corrector('X996082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X996102T = corrector('X996102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X996122T = corrector('X996122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X996142T = corrector('X996142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X996162T = corrector('X996162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X997022T = corrector('X997022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X997042T = corrector('X997042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X997062T = corrector('X997062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X997082T = corrector('X997082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X997102T = corrector('X997102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X998022T = corrector('X998022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X998042T = corrector('X998042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X998062T = corrector('X998062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X998082T = corrector('X998082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X998102T = corrector('X998102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X999022T = corrector('X999022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X999042T = corrector('X999042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X999062T = corrector('X999062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X999082T = corrector('X999082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X999102T = corrector('X999102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X999122T = corrector('X999122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X999142T = corrector('X999142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X999162T = corrector('X999162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X776022T = corrector('X776022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X776042T = corrector('X776042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X776062T = corrector('X776062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X776082T = corrector('X776082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X776102T = corrector('X776102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X776122T = corrector('X776122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X776142T = corrector('X776142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X776162T = corrector('X776162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X777022T = corrector('X777022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X777045T = corrector('X777045T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X778020T = corrector('X778020T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X778042T = corrector('X778042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X779022T = corrector('X779022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X779042T = corrector('X779042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X779062T = corrector('X779062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X779082T = corrector('X779082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X779102T = corrector('X779102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X779122T = corrector('X779122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X779142T = corrector('X779142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X779162T = corrector('X779162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X786022T = corrector('X786022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X786042T = corrector('X786042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X786062T = corrector('X786062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X786082T = corrector('X786082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X786102T = corrector('X786102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X786122T = corrector('X786122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X786142T = corrector('X786142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X786162T = corrector('X786162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X787022T = corrector('X787022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X787042T = corrector('X787042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X787062T = corrector('X787062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X787082T = corrector('X787082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X787102T = corrector('X787102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X788022T = corrector('X788022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X788042T = corrector('X788042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X788062T = corrector('X788062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X788082T = corrector('X788082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X788102T = corrector('X788102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X789022T = corrector('X789022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X789042T = corrector('X789042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X789062T = corrector('X789062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X789082T = corrector('X789082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X789102T = corrector('X789102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X789122T = corrector('X789122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X789142T = corrector('X789142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X789162T = corrector('X789162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X796022T = corrector('X796022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X796042T = corrector('X796042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X796062T = corrector('X796062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X796082T = corrector('X796082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X796102T = corrector('X796102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X796122T = corrector('X796122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X796142T = corrector('X796142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X796162T = corrector('X796162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X797022T = corrector('X797022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X797042T = corrector('X797042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X797062T = corrector('X797062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X797082T = corrector('X797082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X797102T = corrector('X797102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X798022T = corrector('X798022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X798042T = corrector('X798042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X798062T = corrector('X798062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X798082T = corrector('X798082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X798102T = corrector('X798102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X799022T = corrector('X799022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X799042T = corrector('X799042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X799062T = corrector('X799062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X799082T = corrector('X799082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X799102T = corrector('X799102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X799122T = corrector('X799122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X799142T = corrector('X799142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X799162T = corrector('X799162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X866022T = corrector('X866022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X866042T = corrector('X866042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X866062T = corrector('X866062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X866082T = corrector('X866082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X866102T = corrector('X866102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X866122T = corrector('X866122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X866142T = corrector('X866142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X866162T = corrector('X866162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X867022T = corrector('X867022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X867042T = corrector('X867042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X867062T = corrector('X867062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X867082T = corrector('X867082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X867102T = corrector('X867102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X868022T = corrector('X868022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X868042T = corrector('X868042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X868062T = corrector('X868062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X868082T = corrector('X868082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X868102T = corrector('X868102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X869022T = corrector('X869022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X869042T = corrector('X869042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X869062T = corrector('X869062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X869082T = corrector('X869082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X869102T = corrector('X869102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X869122T = corrector('X869122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X869142T = corrector('X869142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X869162T = corrector('X869162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X876022T = corrector('X876022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X876042T = corrector('X876042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X876062T = corrector('X876062T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X876082T = corrector('X876082T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X876102T = corrector('X876102T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X876122T = corrector('X876122T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X876142T = corrector('X876142T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X876162T = corrector('X876162T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X877022T = corrector('X877022T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
X877042T = corrector('X877042T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y878012T = corrector('Y878012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y878032T = corrector('Y878032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y879012T = corrector('Y879012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y879032T = corrector('Y879032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y879052T = corrector('Y879052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y879072T = corrector('Y879072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y879092T = corrector('Y879092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y879112T = corrector('Y879112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y879132T = corrector('Y879132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y879152T = corrector('Y879152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y996012T = corrector('Y996012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y996032T = corrector('Y996032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y996052T = corrector('Y996052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y996072T = corrector('Y996072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y996092T = corrector('Y996092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y996112T = corrector('Y996112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y996132T = corrector('Y996132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y996152T = corrector('Y996152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y997012T = corrector('Y997012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y997032T = corrector('Y997032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y997052T = corrector('Y997052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y997072T = corrector('Y997072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y997092T = corrector('Y997092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y998012T = corrector('Y998012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y998032T = corrector('Y998032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y998052T = corrector('Y998052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y998072T = corrector('Y998072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y998092T = corrector('Y998092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y999012T = corrector('Y999012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y999032T = corrector('Y999032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y999052T = corrector('Y999052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y999072T = corrector('Y999072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y999092T = corrector('Y999092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y999112T = corrector('Y999112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y999132T = corrector('Y999132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y999152T = corrector('Y999152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y776012T = corrector('Y776012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y776032T = corrector('Y776032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y776052T = corrector('Y776052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y776072T = corrector('Y776072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y776092T = corrector('Y776092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y776112T = corrector('Y776112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y776132T = corrector('Y776132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y776152T = corrector('Y776152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y777012T = corrector('Y777012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y777030T = corrector('Y777030T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y777035T = corrector('Y777035T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y777052T = corrector('Y777052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y778012T = corrector('Y778012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y778028T = corrector('Y778028T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y778032T = corrector('Y778032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y779012T = corrector('Y779012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y779032T = corrector('Y779032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y779052T = corrector('Y779052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y779072T = corrector('Y779072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y779092T = corrector('Y779092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y779112T = corrector('Y779112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y779132T = corrector('Y779132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y779152T = corrector('Y779152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y786012T = corrector('Y786012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y786032T = corrector('Y786032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y786052T = corrector('Y786052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y786072T = corrector('Y786072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y786092T = corrector('Y786092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y786112T = corrector('Y786112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y786132T = corrector('Y786132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y786152T = corrector('Y786152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y787012T = corrector('Y787012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y787032T = corrector('Y787032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y787052T = corrector('Y787052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y787072T = corrector('Y787072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y787092T = corrector('Y787092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y788012T = corrector('Y788012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y788032T = corrector('Y788032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y788052T = corrector('Y788052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y788072T = corrector('Y788072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y788092T = corrector('Y788092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y789012T = corrector('Y789012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y789032T = corrector('Y789032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y789052T = corrector('Y789052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y789072T = corrector('Y789072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y789092T = corrector('Y789092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y789112T = corrector('Y789112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y789132T = corrector('Y789132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y789152T = corrector('Y789152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y796012T = corrector('Y796012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y796032T = corrector('Y796032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y796052T = corrector('Y796052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y796072T = corrector('Y796072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y796092T = corrector('Y796092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y796112T = corrector('Y796112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y796132T = corrector('Y796132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y796152T = corrector('Y796152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y797012T = corrector('Y797012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y797032T = corrector('Y797032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y797052T = corrector('Y797052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y797072T = corrector('Y797072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y797092T = corrector('Y797092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y798012T = corrector('Y798012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y798032T = corrector('Y798032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y798052T = corrector('Y798052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y798072T = corrector('Y798072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y798092T = corrector('Y798092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y799012T = corrector('Y799012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y799032T = corrector('Y799032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y799052T = corrector('Y799052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y799072T = corrector('Y799072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y799092T = corrector('Y799092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y799112T = corrector('Y799112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y799132T = corrector('Y799132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y799152T = corrector('Y799152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y866012T = corrector('Y866012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y866032T = corrector('Y866032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y866052T = corrector('Y866052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y866072T = corrector('Y866072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y866092T = corrector('Y866092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y866112T = corrector('Y866112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y866132T = corrector('Y866132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y866152T = corrector('Y866152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y867012T = corrector('Y867012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y867032T = corrector('Y867032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y867052T = corrector('Y867052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y867072T = corrector('Y867072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y867092T = corrector('Y867092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y868012T = corrector('Y868012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y868032T = corrector('Y868032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y868052T = corrector('Y868052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y868072T = corrector('Y868072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y868092T = corrector('Y868092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y869012T = corrector('Y869012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y869032T = corrector('Y869032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y869052T = corrector('Y869052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y869072T = corrector('Y869072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y869092T = corrector('Y869092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y869112T = corrector('Y869112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y869132T = corrector('Y869132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y869152T = corrector('Y869152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y876012T = corrector('Y876012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y876032T = corrector('Y876032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y876052T = corrector('Y876052T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y876072T = corrector('Y876072T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y876092T = corrector('Y876092T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y876112T = corrector('Y876112T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y876132T = corrector('Y876132T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y876152T = corrector('Y876152T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y877012T = corrector('Y877012T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
Y877032T = corrector('Y877032T', 3.01498000000000e-001, [0.00000000000000e+000 0.00000000000000e+000],  'CorrectorPass');
M878042T = monitor('M878042T', 'IdentityPass');
M879022T = monitor('M879022T', 'IdentityPass');
M879042T = monitor('M879042T', 'IdentityPass');
M996142T = monitor('M996142T', 'IdentityPass');
M996162T = monitor('M996162T', 'IdentityPass');
M997022T = monitor('M997022T', 'IdentityPass');
M997042T = monitor('M997042T', 'IdentityPass');
M997062T = monitor('M997062T', 'IdentityPass');
M997082T = monitor('M997082T', 'IdentityPass');
M997102T = monitor('M997102T', 'IdentityPass');
M998022T = monitor('M998022T', 'IdentityPass');
M998042T = monitor('M998042T', 'IdentityPass');
M998062T = monitor('M998062T', 'IdentityPass');
M998082T = monitor('M998082T', 'IdentityPass');
M998102T = monitor('M998102T', 'IdentityPass');
M999022T = monitor('M999022T', 'IdentityPass');
M999042T = monitor('M999042T', 'IdentityPass');
M999062T = monitor('M999062T', 'IdentityPass');
M999082T = monitor('M999082T', 'IdentityPass');
M999102T = monitor('M999102T', 'IdentityPass');
M999142T = monitor('M999142T', 'IdentityPass');
M999162T = monitor('M999162T', 'IdentityPass');
M776042T = monitor('M776042T', 'IdentityPass');
M776062T = monitor('M776062T', 'IdentityPass');
M776082T = monitor('M776082T', 'IdentityPass');
M776102T = monitor('M776102T', 'IdentityPass');
M776122T = monitor('M776122T', 'IdentityPass');
M776142T = monitor('M776142T', 'IdentityPass');
M776162T = monitor('M776162T', 'IdentityPass');
M779022T = monitor('M779022T', 'IdentityPass');
M779042T = monitor('M779042T', 'IdentityPass');
M779062T = monitor('M779062T', 'IdentityPass');
M779082T = monitor('M779082T', 'IdentityPass');
M779102T = monitor('M779102T', 'IdentityPass');
M779122T = monitor('M779122T', 'IdentityPass');
M779142T = monitor('M779142T', 'IdentityPass');
M786022T = monitor('M786022T', 'IdentityPass');
M786042T = monitor('M786042T', 'IdentityPass');
M786082T = monitor('M786082T', 'IdentityPass');
M786102T = monitor('M786102T', 'IdentityPass');
M786122T = monitor('M786122T', 'IdentityPass');
M786142T = monitor('M786142T', 'IdentityPass');
M786162T = monitor('M786162T', 'IdentityPass');
M787022T = monitor('M787022T', 'IdentityPass');
M787042T = monitor('M787042T', 'IdentityPass');
M787062T = monitor('M787062T', 'IdentityPass');
M787082T = monitor('M787082T', 'IdentityPass');
M787102T = monitor('M787102T', 'IdentityPass');
M788022T = monitor('M788022T', 'IdentityPass');
M788042T = monitor('M788042T', 'IdentityPass');
M788062T = monitor('M788062T', 'IdentityPass');
M788082T = monitor('M788082T', 'IdentityPass');
M788102T = monitor('M788102T', 'IdentityPass');
M789022T = monitor('M789022T', 'IdentityPass');
M789042T = monitor('M789042T', 'IdentityPass');
M789062T = monitor('M789062T', 'IdentityPass');
M789082T = monitor('M789082T', 'IdentityPass');
M789102T = monitor('M789102T', 'IdentityPass');
M789122T = monitor('M789122T', 'IdentityPass');
M789142T = monitor('M789142T', 'IdentityPass');
M789162T = monitor('M789162T', 'IdentityPass');
M796022T = monitor('M796022T', 'IdentityPass');
M796042T = monitor('M796042T', 'IdentityPass');
M796062T = monitor('M796062T', 'IdentityPass');
M796082T = monitor('M796082T', 'IdentityPass');
M796102T = monitor('M796102T', 'IdentityPass');
M796122T = monitor('M796122T', 'IdentityPass');
M796142T = monitor('M796142T', 'IdentityPass');
M796162T = monitor('M796162T', 'IdentityPass');
M797022T = monitor('M797022T', 'IdentityPass');
M797042T = monitor('M797042T', 'IdentityPass');
M797062T = monitor('M797062T', 'IdentityPass');
M797082T = monitor('M797082T', 'IdentityPass');
M797102T = monitor('M797102T', 'IdentityPass');
M798022T = monitor('M798022T', 'IdentityPass');
M798042T = monitor('M798042T', 'IdentityPass');
M798062T = monitor('M798062T', 'IdentityPass');
M798082T = monitor('M798082T', 'IdentityPass');
M798102T = monitor('M798102T', 'IdentityPass');
M799022T = monitor('M799022T', 'IdentityPass');
M799042T = monitor('M799042T', 'IdentityPass');
M866142T = monitor('M866142T', 'IdentityPass');
M866162T = monitor('M866162T', 'IdentityPass');
M867022T = monitor('M867022T', 'IdentityPass');
M867042T = monitor('M867042T', 'IdentityPass');
M867062T = monitor('M867062T', 'IdentityPass');
M867082T = monitor('M867082T', 'IdentityPass');
M867102T = monitor('M867102T', 'IdentityPass');
M868022T = monitor('M868022T', 'IdentityPass');
M868042T = monitor('M868042T', 'IdentityPass');
M868062T = monitor('M868062T', 'IdentityPass');
M868082T = monitor('M868082T', 'IdentityPass');
M868102T = monitor('M868102T', 'IdentityPass');
M869022T = monitor('M869022T', 'IdentityPass');
M869042T = monitor('M869042T', 'IdentityPass');
M876142T = monitor('M876142T', 'IdentityPass');
M876162T = monitor('M876162T', 'IdentityPass');
M877022T = monitor('M877022T', 'IdentityPass');
M878032T = monitor('M878032T', 'IdentityPass');
M879012T = monitor('M879012T', 'IdentityPass');
M879032T = monitor('M879032T', 'IdentityPass');
M996132T = monitor('M996132T', 'IdentityPass');
M996152T = monitor('M996152T', 'IdentityPass');
M997012T = monitor('M997012T', 'IdentityPass');
M997032T = monitor('M997032T', 'IdentityPass');
M997052T = monitor('M997052T', 'IdentityPass');
M997072T = monitor('M997072T', 'IdentityPass');
M997092T = monitor('M997092T', 'IdentityPass');
M998012T = monitor('M998012T', 'IdentityPass');
M998032T = monitor('M998032T', 'IdentityPass');
M998052T = monitor('M998052T', 'IdentityPass');
M998072T = monitor('M998072T', 'IdentityPass');
M998092T = monitor('M998092T', 'IdentityPass');
M999012T = monitor('M999012T', 'IdentityPass');
M999032T = monitor('M999032T', 'IdentityPass');
M999052T = monitor('M999052T', 'IdentityPass');
M999072T = monitor('M999072T', 'IdentityPass');
M999092T = monitor('M999092T', 'IdentityPass');
M999112T = monitor('M999112T', 'IdentityPass');
M999132T = monitor('M999132T', 'IdentityPass');
M999152T = monitor('M999152T', 'IdentityPass');
M776012T = monitor('M776012T', 'IdentityPass');
M776032T = monitor('M776032T', 'IdentityPass');
M776072T = monitor('M776072T', 'IdentityPass');
M776092T = monitor('M776092T', 'IdentityPass');
M776132T = monitor('M776132T', 'IdentityPass');
M776152T = monitor('M776152T', 'IdentityPass');
M777012T = monitor('M777012T', 'IdentityPass');
M779012T = monitor('M779012T', 'IdentityPass');
M779032T = monitor('M779032T', 'IdentityPass');
M779052T = monitor('M779052T', 'IdentityPass');
M779092T = monitor('M779092T', 'IdentityPass');
M779112T = monitor('M779112T', 'IdentityPass');
M779152T = monitor('M779152T', 'IdentityPass');
M786012T = monitor('M786012T', 'IdentityPass');
M786032T = monitor('M786032T', 'IdentityPass');
M786052T = monitor('M786052T', 'IdentityPass');
M786072T = monitor('M786072T', 'IdentityPass');
M786092T = monitor('M786092T', 'IdentityPass');
M786112T = monitor('M786112T', 'IdentityPass');
M786132T = monitor('M786132T', 'IdentityPass');
M786152T = monitor('M786152T', 'IdentityPass');
M787012T = monitor('M787012T', 'IdentityPass');
M787032T = monitor('M787032T', 'IdentityPass');
M787052T = monitor('M787052T', 'IdentityPass');
M787072T = monitor('M787072T', 'IdentityPass');
M787092T = monitor('M787092T', 'IdentityPass');
M788012T = monitor('M788012T', 'IdentityPass');
M788032T = monitor('M788032T', 'IdentityPass');
M788052T = monitor('M788052T', 'IdentityPass');
M788072T = monitor('M788072T', 'IdentityPass');
M788092T = monitor('M788092T', 'IdentityPass');
M789012T = monitor('M789012T', 'IdentityPass');
M789032T = monitor('M789032T', 'IdentityPass');
M796132T = monitor('M796132T', 'IdentityPass');
M796152T = monitor('M796152T', 'IdentityPass');
M797012T = monitor('M797012T', 'IdentityPass');
M797032T = monitor('M797032T', 'IdentityPass');
M797052T = monitor('M797052T', 'IdentityPass');
M797072T = monitor('M797072T', 'IdentityPass');
M797092T = monitor('M797092T', 'IdentityPass');
M798012T = monitor('M798012T', 'IdentityPass');
M798032T = monitor('M798032T', 'IdentityPass');
M798052T = monitor('M798052T', 'IdentityPass');
M798072T = monitor('M798072T', 'IdentityPass');
M798092T = monitor('M798092T', 'IdentityPass');
M799012T = monitor('M799012T', 'IdentityPass');
M799032T = monitor('M799032T', 'IdentityPass');
M866132T = monitor('M866132T', 'IdentityPass');
M866152T = monitor('M866152T', 'IdentityPass');
M867012T = monitor('M867012T', 'IdentityPass');
M867032T = monitor('M867032T', 'IdentityPass');
M867052T = monitor('M867052T', 'IdentityPass');
M867072T = monitor('M867072T', 'IdentityPass');
M867092T = monitor('M867092T', 'IdentityPass');
M868012T = monitor('M868012T', 'IdentityPass');
M868032T = monitor('M868032T', 'IdentityPass');
M868052T = monitor('M868052T', 'IdentityPass');
M868072T = monitor('M868072T', 'IdentityPass');
M868092T = monitor('M868092T', 'IdentityPass');
M869012T = monitor('M869012T', 'IdentityPass');
M869032T = monitor('M869032T', 'IdentityPass');
M876132T = monitor('M876132T', 'IdentityPass');
M876152T = monitor('M876152T', 'IdentityPass');
M877012T = monitor('M877012T', 'IdentityPass');
M877032T = monitor('M877032T', 'IdentityPass');
M878012T = monitor('M878012T', 'IdentityPass');
M878022T = monitor('M878022T', 'IdentityPass');
M879052T = monitor('M879052T', 'IdentityPass');
M879062T = monitor('M879062T', 'IdentityPass');
M879072T = monitor('M879072T', 'IdentityPass');
M879082T = monitor('M879082T', 'IdentityPass');
M879092T = monitor('M879092T', 'IdentityPass');
M879102T = monitor('M879102T', 'IdentityPass');
M879112T = monitor('M879112T', 'IdentityPass');
M879122T = monitor('M879122T', 'IdentityPass');
M879132T = monitor('M879132T', 'IdentityPass');
M879142T = monitor('M879142T', 'IdentityPass');
M879152T = monitor('M879152T', 'IdentityPass');
M879162T = monitor('M879162T', 'IdentityPass');
M996012T = monitor('M996012T', 'IdentityPass');
M996022T = monitor('M996022T', 'IdentityPass');
M996032T = monitor('M996032T', 'IdentityPass');
M996042T = monitor('M996042T', 'IdentityPass');
M996052T = monitor('M996052T', 'IdentityPass');
M996062T = monitor('M996062T', 'IdentityPass');
M996072T = monitor('M996072T', 'IdentityPass');
M996082T = monitor('M996082T', 'IdentityPass');
M996092T = monitor('M996092T', 'IdentityPass');
M996102T = monitor('M996102T', 'IdentityPass');
M996112T = monitor('M996112T', 'IdentityPass');
M996122T = monitor('M996122T', 'IdentityPass');
M999122T = monitor('M999122T', 'IdentityPass');
M776022T = monitor('M776022T', 'IdentityPass');
M776052T = monitor('M776052T', 'IdentityPass');
M776112T = monitor('M776112T', 'IdentityPass');
M777022T = monitor('M777022T', 'IdentityPass');
M777030T = monitor('M777030T', 'IdentityPass');
M777035T = monitor('M777035T', 'IdentityPass');
M777045T = monitor('M777045T', 'IdentityPass');
M777052T = monitor('M777052T', 'IdentityPass');
M777083T = monitor('M777083T', 'IdentityPass');
M777087T = monitor('M777087T', 'IdentityPass');
M778012T = monitor('M778012T', 'IdentityPass');
M778020T = monitor('M778020T', 'IdentityPass');
M778026T = monitor('M778026T', 'IdentityPass');
M778032T = monitor('M778032T', 'IdentityPass');
M778042T = monitor('M778042T', 'IdentityPass');
M779072T = monitor('M779072T', 'IdentityPass');
M779132T = monitor('M779132T', 'IdentityPass');
M779162T = monitor('M779162T', 'IdentityPass');
M786062T = monitor('M786062T', 'IdentityPass');
M789052T = monitor('M789052T', 'IdentityPass');
M789072T = monitor('M789072T', 'IdentityPass');
M789092T = monitor('M789092T', 'IdentityPass');
M789112T = monitor('M789112T', 'IdentityPass');
M789132T = monitor('M789132T', 'IdentityPass');
M789152T = monitor('M789152T', 'IdentityPass');
M796012T = monitor('M796012T', 'IdentityPass');
M796032T = monitor('M796032T', 'IdentityPass');
M796052T = monitor('M796052T', 'IdentityPass');
M796072T = monitor('M796072T', 'IdentityPass');
M796092T = monitor('M796092T', 'IdentityPass');
M796112T = monitor('M796112T', 'IdentityPass');
M799052T = monitor('M799052T', 'IdentityPass');
M799062T = monitor('M799062T', 'IdentityPass');
M799072T = monitor('M799072T', 'IdentityPass');
M799082T = monitor('M799082T', 'IdentityPass');
M799092T = monitor('M799092T', 'IdentityPass');
M799102T = monitor('M799102T', 'IdentityPass');
M799112T = monitor('M799112T', 'IdentityPass');
M799122T = monitor('M799122T', 'IdentityPass');
M799132T = monitor('M799132T', 'IdentityPass');
M799142T = monitor('M799142T', 'IdentityPass');
M799152T = monitor('M799152T', 'IdentityPass');
M799162T = monitor('M799162T', 'IdentityPass');
M866012T = monitor('M866012T', 'IdentityPass');
M866022T = monitor('M866022T', 'IdentityPass');
M866032T = monitor('M866032T', 'IdentityPass');
M866042T = monitor('M866042T', 'IdentityPass');
M866052T = monitor('M866052T', 'IdentityPass');
M866062T = monitor('M866062T', 'IdentityPass');
M866072T = monitor('M866072T', 'IdentityPass');
M866082T = monitor('M866082T', 'IdentityPass');
M866092T = monitor('M866092T', 'IdentityPass');
M866102T = monitor('M866102T', 'IdentityPass');
M866112T = monitor('M866112T', 'IdentityPass');
M866122T = monitor('M866122T', 'IdentityPass');
M869052T = monitor('M869052T', 'IdentityPass');
M869062T = monitor('M869062T', 'IdentityPass');
M869072T = monitor('M869072T', 'IdentityPass');
M869082T = monitor('M869082T', 'IdentityPass');
M869092T = monitor('M869092T', 'IdentityPass');
M869102T = monitor('M869102T', 'IdentityPass');
M869112T = monitor('M869112T', 'IdentityPass');
M869122T = monitor('M869122T', 'IdentityPass');
M869132T = monitor('M869132T', 'IdentityPass');
M869142T = monitor('M869142T', 'IdentityPass');
M869152T = monitor('M869152T', 'IdentityPass');
M869162T = monitor('M869162T', 'IdentityPass');
M876012T = monitor('M876012T', 'IdentityPass');
M876022T = monitor('M876022T', 'IdentityPass');
M876032T = monitor('M876032T', 'IdentityPass');
M876042T = monitor('M876042T', 'IdentityPass');
M876052T = monitor('M876052T', 'IdentityPass');
M876062T = monitor('M876062T', 'IdentityPass');
M876072T = monitor('M876072T', 'IdentityPass');
M876082T = monitor('M876082T', 'IdentityPass');
M876092T = monitor('M876092T', 'IdentityPass');
M876102T = monitor('M876102T', 'IdentityPass');
M876112T = monitor('M876112T', 'IdentityPass');
M876122T = monitor('M876122T', 'IdentityPass');
M877042T = monitor('M877042T', 'IdentityPass');



L000001 = [DSEP, DOI1, QDI, QDI, D45QMB, M878012T, D45MCB, Y878012T, ...
DMOI2A, BM1R, BM1R, DOI2BM, M878022T, D45QM, QFI, QFI, D45QC, X878022T, ...
DMOI3, BKPINGV, BKPINGV, DBKPING2, BKPINGH, BKPINGH, DBKPING1, BK, BK, DMOI4,...
M878032T, D56SQM, QDOI, QDOI, D56QC, Y878032T, DMOI5A, BM2R, BM2R, DOI5BB, ...
DUSQ, DUSQ, DSK, M878042T, D56SQM, QFOI, QFOI, D56QC, X878042T, DM5656, ...
QDS0E, QDS0E, D56QM, M879012T, D56MC, Y879012T, D56CB, B, DBQ56, QFS1E, ...
QFS1E, D56QM, M879022T, D56MC, X879022T, D56CB, B, DBQ56, QDS1E, QDS1E, ...
D56QM, M879032T, D56MC, Y879032T, D56CB, B, DBQ56, QFS2E, QFS2E, D56QM, ...
M879042T, D56MC, X879042T, D56CB, B, D56BS, SD, SD, D56SQ, QDS2E, QDS2E, ...
D56QM, M879052T, D56MC, Y879052T, D56CB, B, D56BS, SF, SF, D56SQ, QFS3E, ...
QFS3E, D56QM, M879062T, D56MC, X879062T, D56CB, B, D56BS, SD, SD, D56SQ, ...
QDS3E, QDS3E, D56QM, M879072T, D56MC, Y879072T, D56CB, B, D56BS, SF, SF, ...
D56SQ, QF90, QF90, D56QM, M879082T, D56MC, X879082T, D56CB, B, D56BS, SD, SD, ...
D56SQ, QD90, QD90, D56QM, M879092T, D56MC, Y879092T, D56CB, B, D56BS, SF, ...
SF, D56SQ, QF90, QF90, D56QM];

L000002 = [M879102T, D56MC, X879102T, D56CB, B, D56BS, SD, SD, D56SQ, ...
QD90, QD90, D56QM, M879112T, D56MC, Y879112T, D56CB, B, D56BS, SF, SF, D56SQ, ...
QF90, QF90, D56QM, M879122T, D56MC, X879122T, D56CB, B, D56BS, SD, SD, ...
D56SQ, QD90, QD90, D56QM, M879132T, D56MC, Y879132T, D56CB, B, D56BS, SF, SF, ...
D56SQ, QF90, QF90, D56QM, M879142T, D56MC, X879142T, D56CB, B, D56BS, SD, ...
SD, D56SQ, QD90, QD90, D56QM, M879152T, D56MC, Y879152T, D56CB, B, D56BS, SF, ...
SF, D56SQ, QF90, QF90, D56QM, M879162T, D56MC, X879162T, D56CB, B, D56BS, ...
SD, SD, D56SQ, QD90, M_ARC, QD90, D56QM, M996012T, D56MC, Y996012T, D56CB, B, ...
D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M996022T, D56MC, X996022T, D56CB, ...
B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M996032T, D56MC, Y996032T, D56CB, ...
B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M996042T, D56MC, X996042T, ...
D56CB, B, D56BS, SD, SD, D56SQ, QD90];

L000003 = [QD90, D56QM, M996052T, D56MC, Y996052T, D56CB, B, D56BS, SF, ...
SF, D56SQ, QF90, QF90, D56QM, M996062T, D56MC, X996062T, D56CB, B, D56BS, ...
SD, SD, D56SQ, QD90, QD90, D56QM, M996072T, D56MC, Y996072T, D56CB, B, D56BS, ...
SF, SF, D56SQ, QF90, QF90, D56QM, M996082T, D56MC, X996082T, D56CB, B, ...
D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M996092T, D56MC, Y996092T, D56CB, B, ...
D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M996102T, D56MC, X996102T, D56CB, ...
B, D56BS, SD, SD, D56SQ, QDS3E, QDS3E, D56QM, M996112T, D56MC, Y996112T, ...
D56CB, B, D56BS, SF, SF, D56SQ, QFS3E, QFS3E, D56QM, M996122T, D56MC, ...
X996122T, D56CB, B, D56BS, DSX, DSX, D56SQ, QDS2E, QDS2E, D56QM, M996132T, ...
D56MC, Y996132T, D56CB, B, DBQ56, QFS2E, QFS2E, D56QM, M996142T, D56MC, ...
X996142T, D56CB, B, DBQ56, QDS1E, QDS1E, D56QM, M996152T, D56MC, Y996152T, ...
D56CB, B, DBQ56, QFS1E, QFS1E, D56QM, M996162T, D56MC, X996162T, D56CB, B, ...
DBQ56, QDS0XE, QDS0XE, D56QM, M997012T, D56MC];

L000004 = [Y997012T, DMRF9, M997022T, D73QM, QFRF9R12, QFRF9R12, D73QC, ...
X997022T, DRFC1A, CAV1AR12, DCAVSEP, CAV1BR12, DRFC1B, M997032T, D73QM, ...
QDRF8R12, QDRF8R12, D73QC, Y997032T, DRFC1C, CAV1CR12, DCAVSEP, CAV1DR12, ...
DRFC1D, M997042T, D73QM, QFRF, QFRF, D73QC, X997042T, DRFC3A, CAV3AR12, ...
DCAVSEP, CAV3BR12, DRFC3B, M997052T, D73QM, QDRF, QDRF, D73QC, Y997052T, ...
DRFC3C, CAV3CR12, DCAVSEP, CAV3DR12, DRFC3D, M997062T, D73QM, QFRF, QFRF, ...
D73QC, X997062T, D706212A, PHASERFCA, D706212B, CAV5AR12, DCAVSEP, CAV5BR12, ...
DRFC5B, M997072T, D73QM, QDRF4, QDRF4, D73QC, Y997072T, DRFC5C, CAV5CR12, ...
DCAVSEP, CAV5DR12, DRFC5D, M997082T, D73QM, QFRFC, QFRFC, D73QC, X997082T, ...
D73CO, DUOX, DUOX, D73OO, DUOXY, DUOXY, D73OOQ, M997092T, D73QM, QDRFC, ...
QDRFC, D73QC, Y997092T, D73CO12, DUOY, DUOY, D73OQ12A, COLLX1, DGCBPM, ...
M997102T, D73QM, QFRFC, QFRFC, D73QC, X997102T, D73CO, DUOX, DUOX, D73OO, ...
DUOXY, DUOXY, D73OOQA, COLLY1, DGCBPM, M998012T, D73QM, QDRFC, M_ST, QDRFC, ...
D73QC, Y998012T, D73CO12, DUOY, DUOY, D73OQ12, M998022T, D73QM, QFRFC, QFRFC, ...
D73QC, X998022T, D73CO, DUOX, DUOX, D73OO, DUOXY, DUOXY, D73OOQ, M998032T, ...
D73QM, QDRFC, QDRFC, D73QC];

L000005 = [Y998032T, D73CO12, DUOY, DUOY, D73OQ12, M998042T, D73QM, ...
QFRFC, QFRFC, D73QC, X998042T, DSK, DUSQ, DUSQ, DMRF3S, M998052T, D73QM, ...
QDRF4, QDRF4, D73QC, Y998052T, DMRF0B, COLLX2, DGCBPM, M998062T, D73QM, QFRF,...
QFRF, D73QC, X998062T, DMRF0C, COLLY2, DGCBPM, M998072T, D73QM, QDRF, QDRF, ...
D73QC, Y998072T, DMRF0, M998082T, D73QM, QFRF, QFRF, D73QC, X998082T, ...
DMRF0, M998092T, D73QM, QDRF8R12, QDRF8R12, D73QC, Y998092T, DMRF8, M998102T, ...
D73QM, QFRF9R12, QFRF9R12, D73QC, X998102T, DSK, DUSQ, DUSQ, DMRF9S, D73QM, ...
QDS0XSR1, QDS0XSR1, D56QM, M999012T, D56MC, Y999012T, D56CB, B, DBQ56, ...
QFS1SR01, QFS1SR01, D56QM, M999022T, D56MC, X999022T, D56CB, B, DBQ56, ...
QDS1SR01, QDS1SR01, D56QM, M999032T, D56MC, Y999032T, D56CB, B, DBQ56, ...
QFS2SR01, QFS2SR01, D56QM, M999042T, D56MC, X999042T, D56CB, B, D56BS, DSX, ...
DSX, D56SQ, QDS2SR01, QDS2SR01, D56QM, M999052T, D56MC, Y999052T, D56CB, B, ...
D56BS, DSX, DSX, D56SQ, QFS3SR01, QFS3SR01, D56QM, M999062T, D56MC, X999062T, ...
D56CB, B, D56BS, DSX, DSX, D56SQ, QDS3S, QDS3S, D56QM, M999072T, D56MC, ...
Y999072T, D56CB];

L000006 = [B, D56BS, DSX, DSX, D56SQ, MCOL, QF, QF, D56QM, M999082T, ...
D56MC, X999082T, D56CB, B, DBQ56, QD, QD, D56QM, M999092T, D56MC, Y999092T, ...
D56CB, B, D56BS, DSX, DSX, D56SQ, QF, QF, D56QM, M999102T, D56MC, X999102T, ...
D56CB, B, D56BS, DSX, DSX, D56SQ, QD, QD, D56QM, M999112T, D56MC, Y999112T, ...
D56CB, B, D56BS, SF6B, SF6B, D56SQ, QF, QF, D56QM, M999122T, D56MC, X999122T, ...
D56CB, B, D56BS, DSX, DSX, D56SQ, QD, QD, D56QM, M999132T, D56MC, Y999132T, ...
D56CB, B, D56BS, DSX, DSX, D56SQ, QF, QF, D56QM, M999142T, D56MC, X999142T, ...
D56CB, B, D56BC, MCOLF, QD, QD, D56QM, M999152T, D56MC, Y999152T, D56CB, B, ...
D56BS, DSX, DSX, D56SQ, QF, QF, D56QM, M999162T, D56MC, X999162T, D56CB, B, ...
D56BS, DSX, DSX, D56SQ, QD, M_ARC, QD, D56QM, M776012T, D56MC, Y776012T, ...
D56CB, B, D56BS, SF6B, SF6B, D56SQ, QF, QF, D56QM, M776022T, D56MC, X776022T, ...
D56CB, B, D56BS, DSX, DSX, D56SQ, QD];

L000007 = [QD, D56QM, M776032T, D56MC, Y776032T, D56CB, B, D56BS, DSX, ...
DSX, D56SQ, QF, QF, D56QM, M776042T, D56MC, X776042T, D56CB, B, D56BS, SQ6L, ...
SD4A, SD4A, SQ6L, D56SQ, QD, QD, D56QM, M776052T, D56MC, Y776052T, D56CB, B, ...
D56BS, DSX, DSX, D56SQ, QF, QF, D56QM, M776062T, D56MC, X776062T, D56CB, B, ...
D56BS, DSX, DSX, D56SQ, QD, QD, D56QM, M776072T, D56MC, Y776072T, D56CB, B, ...
D56BS, DSX, DSX, D56SQ, QF, QF, D56QM, M776082T, D56MC, X776082T, D56CB, B, ...
D56BS, DSX, DSX, D56SQ, QD, QD, D56QM, M776092T, D56MC, Y776092T, D56CB, B, ...
D56BS, DSX, DSX, D56SQ, QF, QF, D56QM, M776102T, D56MC, X776102T, D56CB, B, ...
D56BS, SQ5L, SD4A, SD4A, SQ5L, D56SQ, QDS3L, QDS3L, D56QM, M776112T, D56MC, ...
Y776112T, D56CB, B, D56BS, DSX, DSX, D56SQ, QFS3L, QFS3L, D56QM, M776122T, ...
D56MC, X776122T, D56CB, BL, D9LBS, DSX, DSX, D56SQ, QDS2L, QDS2L, D56QM, ...
M776132T, D56MC, Y776132T, DSC8LM, B, DSC7LB, SQ4L, SQ4L, DSC7LQ, QFS2L, ...
QFS2L, D56QM];

L000008 = [M776142T, D56MC, X776142T, DSC6LM, B, D5LBS, DSX, DSX, ...
D56SQ, QDS1L, QDS1L, D56QM, M776152T, D56MC, Y776152T, DSC4LM, B, DSC3LB, ...
SQ3L, SQ3L, DSC3LQ, QFS1L, QFS1L, D56QM, M776162T, D56MC, HCOR2L, X776162T, ...
HCOR2L, DSC2LM, BL, DSC1L, QDS0L, QDS0L, D56QM, M777012T, D56MC, Y777012T, ...
DSPQDS0L, BSEP1L, BSEP1L, DSEPL, M777022T, D73QM, QF7L, QF7L, D73QC, ...
X777022T, DQD6QF7L, M777030T, D73QM, QD6L, QD6L, D73QC, VCOR2L, Y777030T, ...
VCOR2L, DB3QD6L, B3M, DSQ2B3, SQ2L, SQ2L, DSQ2COL, Y777035T, DCOLSEPA, COLL, ...
COLL, DCOLSEPB, M777035T, DCOLSEPC, BSEP2L, BSEP2L, DB2SEP, B2M, DBLFB2, ...
BLFMCOR, BLFM, BLFMCOR, DSQ1BLF, SQ1L, SQ1L, DSQ1COL, COLL, COLL, DCOLHC1, ...
HCOR1L, X777045T, HCOR1L, DQF5SQBL, M777045T, DQF5SQAL, QF5DL, QF5CL, QF5BL, ...
QF5AL, DHVQF5, VCOR1L, Y777052T, VCOR1L, DBMHV, M777052T, DQD4BM, VKQD4APL, ...
QD4LP, VKQD4APL, VKQD4AOL, QD4LO, VKQD4AOL, VKQD4ANL, QD4LN, VKQD4ANL, ...
VKQD4AML, QD4LM, VKQD4AML, VKQD4ALL, QD4LL, VKQD4ALL, VKQD4AKL, QD4LK, ...
VKQD4AKL, VKQD4AJL, QD4LJ, VKQD4AJL, VKQD4AIL, QD4LI, VKQD4AIL, VKQD4AHL, ...
QD4LH, VKQD4AHL, VKQD4AGL, QD4LG, VKQD4AGL, VKQD4AFL, QD4LF, VKQD4AFL, ...
VKQD4AEL, QD4LE, VKQD4AEL, VKQD4ADL, QD4LD, VKQD4ADL, VKQD4ACL, QD4LC, ...
VKQD4ACL, VKQD4ABL, QD4LB, VKQD4ABL, VKQD4AAL, QD4LA, VKQD4AAL, DBH1, SQF2HL, ...
VK2F2HL, MQF2HL, SQF2HHL, VK1F2HL, MQF2HL, SQF2GHL, VK2F2GL, MQF2GL, ...
SQF2GGL, VK1F2GL, MQF2GL, SQF2FGL, VK2F2FL, MQF2FL, SQF2FFL, VK1F2FL, MQF2FL, ...
SQF2EFL, VK2F2EL, MQF2EL, SQF2EEL, VK1F2EL, MQF2EL, SQF2DEL];

L000009 = [VK2F2DL, MQF2DL, SQF2DDL, VK1F2DL, MQF2DL, SQF2CDL, VK2F2CL,...
MQF2CL, SQF2CCL, VK1F2CL, MQF2CL, SQF2BCL, VK2F2BL, MQF2BL, SQF2BBL, ...
VK1F2BL, MQF2BL, SQF2ABL, VK2F2AL, MQF2AL, SQF2AAL, VK1F2AL, MQF2AL, SQF2AL, ...
VKD2F2L, S15D2L, VK1415D2L, S14D2L, VK1314D2L, S13D2L, VK1213D2L, S12D2L, ...
VK1112D2L, S11D2L, VK1011D2L, S10D2L, VK910D2L, S9D2L, VK89D2L, S8D2L, ...
VK78D2L, S7D2L, VK67D2L, S6D2L, VK56D2L, S5D2L, VK45D2L, S4D2L, VK34D2L, ...
S3D2L, VK23D2L, S2D2L, VK12D2L, S1D2L, VK01D2L, S0D2L, VKQ1D2L, SQ1BGL, ...
VKD1BGL, VKQD1BGL, MQ1BGL, VKQD1BGL, SQ1BFGL, VKD1BFL, VKQD1BFL, MQ1BFL, ...
VKQD1BFL, SQ1BEFL, VKD1BEL, MQ1BEL, HKQ1BEL, SQ1BDEL, VKD1BDL, MQ1BDL, ...
HKQ1BDL, SQ1BDL, VKYAN3L, YAN3L, SQ1P3L, VKD1P3L, MQ1P3L, HKQ1P3L, SQ1BC3L, ...
VKD1BCL, MQ1BCL, HKQ1BCL, SQ1BBCL, VKD1BBL, MQ1BBL, HKQ1BBL, SQ1BABL, ...
VKD1BAL, MQ1BAL, HKQ1BAL, SQ1BAL, VKD1PBL, SQ1APL, VKD1APL, MQ1APL, HKQ1APL, ...
SQ1AOPL, VKD1AOL, MQ1AOL, HKQ1AOL, SQ1ANOL, VKD1ANL, MQ1ANL, HKQ1ANL, ...
SQ1AMNL, VKD1AML, MQ1AML, HKQ1AML, SQ1ALML, VKD1ALL, MQ1ALL, HKQ1ALL, ...
SQ1AKLL, VKD1AKL, MQ1AKL, HKQ1AKL, SQ1AJKL, VKD1AJL, MQ1AJL, HKQ1AJL, ...
SQ1AIJL, VKD1AIL, MQ1AIL, HKQ1AIL, SQ1AHIL, VKD1AHL, MQ1AHL, HKQ1AHL, SQ1AHL, ...
VKYAN2L, YAN2L, SQ1P2L, VKD1P2L, MQ1P2L, HKQ1P2L, SQ1AG2L, VKD1AGL, MQ1AGL, ...
HKQ1AGL, SQ1AFGL, VKD1AFL, MQ1AFL, HKQ1AFL, SQ1AEFL, VKD1AEL, MQ1AEL, ...
HKQ1AEL, SQ1ADEL, VKD1ADL, MQ1ADL, HKQ1ADL, SQ1ACDL, VKD1ACL, MQ1ACL, ...
HKQ1ACL, SQ1ABCL, VKD1ABL, MQ1ABL, HKQ1ABL, SQ1AABL, VKD1AAL, MQ1AAL, ...
HKQ1AAL, SQ1AAL, VKD1BQ1L, S4D1BL, VK34D1BL, S3D1BL, VK23D1BL, S2D1BL, ...
VK12D1BL, S1D1BL, VK01D1BL, S0D1BL];

L000010 = [M777083T, VKD1AD1BL, S0D1AL, VKB1D1AL, SB1ML, VKB1ML, B1ML, ...
SB1LML, VKB1LL, B1LL, SB1LL, VKYAN1L, YAN1L, SB1P1L, VKB1P1L, B1P1L, SB1KP1L, ...
VKB1KL, B1KL, SB1JKL, VKB1JL, B1JL, SB1IJL, VKB1IL, B1IL, SB1HIL, VKB1HL, ...
B1HL, SB1GHL, VKB1GL, B1GL, SB1FGL, VKB1FL, B1FL, SB1EFL, VKB1EL, B1EL, ...
SB1DEL, VKB1DL, B1DL, SB1CDL, VKB1CL, B1CL, SB1BCL, VKB1BL, B1BL, SB1ABL, ...
VKB1AL, B1AL, SB1AL, VKSTB1AL, S4STL, VK34STL, S3STL, VK23STL, S2STL, ...
VK12STL, S1STL, VK01STL, S0STL, VK00STL, IP1M, IP, M_ST, IP, IP2M, VK00STR, ...
S0STR, VK01STR, S1STR, VK12STR, S2STR, VK23STR, S3STR, VK34STR, S4STR, ...
VKSTB1AR, SB1AR, B1A, VKB1AR, SB1ABR, B1B, VKB1BR, SB1BCR, B1C, VKB1CR, ...
SB1CDR, B1D, VKB1DR, SB1DER, B1E, VKB1ER, SB1EFR, B1F, VKB1FR, SB1FGR, B1G, ...
VKB1GR, SB1GHR, B1H, VKB1HR, SB1HIR, B1I, VKB1IR, SB1IJR, B1J, VKB1JR, ...
SB1JKR, B1K, VKB1KR, SB1KP1R, B1P1, VKB1P1R, SB1P1R, YAN1R, VKYAN1R, SB1LR, ...
B1L, VKB1LR, SB1LMR, B1M, VKB1MR, SB1MR, VKB1D1AR, S0D1AR, VKD1AD1BR, ...
M777087T, S0D1BR, VK01D1BR, S1D1BR, VK12D1BR, S2D1BR, VK23D1BR, S3D1BR, ...
VK34D1BR, S4D1BR, VKD1BQ1R, SQ1AAR, MQ1AAR, HKQ1AAR, VKD1AAR, SQ1AABR, ...
MQ1ABR, HKQ1ABR, VKD1ABR, SQ1ABCR, MQ1ACR, HKQ1ACR, VKD1ACR, SQ1ACDR, MQ1ADR, ...
HKQ1ADR, VKD1ADR, SQ1ADER, MQ1AER, HKQ1AER, VKD1AER, SQ1AEFR, MQ1AFR, ...
HKQ1AFR, VKD1AFR, SQ1AFGR, MQ1AGR, HKQ1AGR, VKD1AGR, SQ1AG2R, MQ1P2R, ...
HKQ1P2R, VKD1P2R, SQ1P2R, YAN2R, VKYAN2R, SQ1AHR, MQ1AHR, HKQ1AHR, VKD1AHR, ...
SQ1AHIR, MQ1AIR, HKQ1AIR, VKD1AIR, SQ1AIJR, MQ1AJR, HKQ1AJR, VKD1AJR, ...
SQ1AJKR, MQ1AKR, HKQ1AKR, VKD1AKR, SQ1AKLR, MQ1ALR, HKQ1ALR, VKD1ALR, ...
SQ1ALMR, MQ1AMR, HKQ1AMR, VKD1AMR, SQ1AMNR];

L000011 = [MQ1ANR, HKQ1ANR, VKD1ANR, SQ1ANOR, MQ1AOR, HKQ1AOR, VKD1AOR, ...
SQ1AOPR, MQ1APR, HKQ1APR, VKD1APR, SQ1APR, VKD1PBR, SQ1BAR, MQ1BAR, ...
HKQ1BAR, VKD1BAR, SQ1BABR, MQ1BBR, HKQ1BBR, VKD1BBR, SQ1BBCR, MQ1BCR, ...
HKQ1BCR, VKD1BCR, SQ1BC3R, MQ1P3R, HKQ1P3R, VKD1P3R, SQ1P3R, YAN3R, VKYAN3R, ...
SQ1BDR, MQ1BDR, HKQ1BDR, VKD1BDR, SQ1BDER, MQ1BER, HKQ1BER, VKD1BER, SQ1BEFR, ...
VKQD1BFR, MQ1BFR, VKQD1BFR, VKD1BFR, SQ1BFGR, VKQD1BGR, MQ1BGR, VKQD1BGR, ...
VKD1BGR, SQ1BGR, VKQ1D2R, S0D2R, VK01D2R, S1D2R, VK12D2R, S2D2R, VK23D2R, ...
S3D2R, VK34D2R, S4D2R, VK45D2R, S5D2R, VK56D2R, S6D2R, VK67D2R, S7D2R, ...
VK78D2R, S8D2R, VK89D2R, S9D2R, VK910D2R, S10D2R, VK1011D2R, S11D2R, ...
VK1112D2R, S12D2R, VK1213D2R, S13D2R, VK1314D2R, S14D2R, VK1415D2R, S15D2R, ...
VKD2F2R, SQF2AR, MQF2AR, VK1F2AR, SQF2AAR, MQF2AR, VK2F2AR, SQF2ABR, MQF2BR, ...
VK1F2BR, SQF2BBR, MQF2BR, VK2F2BR, SQF2BCR, MQF2CR, VK1F2CR, SQF2CCR, MQF2CR, ...
VK2F2CR, SQF2CDR, MQF2DR, VK1F2DR, SQF2DDR, MQF2DR, VK2F2DR, SQF2DER, ...
MQF2ER, VK1F2ER, SQF2EER, MQF2ER, VK2F2ER, SQF2EFR, MQF2FR, VK1F2FR, SQF2FFR, ...
MQF2FR, VK2F2FR, SQF2FGR, MQF2GR, VK1F2GR, SQF2GGR, MQF2GR, VK2F2GR, ...
SQF2GHR, MQF2HR, VK1F2HR, SQF2HHR, MQF2HR, VK2F2HR, SQF2HR, DBH1, VKQD4AAR, ...
QD4RA, VKQD4AAR, VKQD4ABR, QD4RB, VKQD4ABR, VKQD4ACR, QD4RC, VKQD4ACR, ...
VKQD4ADR, QD4RD, VKQD4ADR, VKQD4AER, QD4RE, VKQD4AER, VKQD4AFR, QD4RF, ...
VKQD4AFR, VKQD4AGR, QD4RG, VKQD4AGR, VKQD4AHR, QD4RH, VKQD4AHR, VKQD4AIR, ...
QD4RI, VKQD4AIR, VKQD4AJR, QD4RJ, VKQD4AJR, VKQD4AKR, QD4RK, VKQD4AKR, ...
VKQD4ALR, QD4RL, VKQD4ALR, VKQD4AMR, QD4RM, VKQD4AMR, VKQD4ANR, QD4RN, ...
VKQD4ANR, VKQD4AOR, QD4RO, VKQD4AOR, VKQD4APR, QD4RP, VKQD4APR, DQD4BM, ...
M778012T, DBMHV, VCOR1R, Y778012T];

L000012 = [VCOR1R, DHVQF5, QF5AR, QF5BR, QF5CR, QF5DR, DQF5SQA, ...
M778020T, DQF5SQB, HCOR1R, X778020T, HCOR1R, DQF5SQCA, M778026T, DQF5SQCB, ...
SQ1R, SQ1R, DSQ1BLF, BLFCOR, BLF, BLFCOR, DBLFB2, B2, DB2SEP, BSEP2R, BSEP2R, ...
DSEPSQ2A, Y778028T, DSEPSQ2K, SQ2R, SQ2R, DSQ2B3, B3, DB3QD6R, M778032T, ...
D73QM, QD6R, QD6R, D73QC, VCOR2R, Y778032T, VCOR2R, DQD6QF7, M778042T, D73QM, ...
QF7R, QF7R, D73QC, X778042T, DSEPR, BSEP1R, BSEP1R, DSEPQDS0, QDS0R, QDS0R, ...
D56QM, M779012T, D56MC, Y779012T, DSC1RM, BR, DSC2RB, SQ3R, SQ3R, DSC2RQ, ...
QFS1R, QFS1R, D56QM, M779022T, D56MC, HCOR2R, X779022T, HCOR2R, DSC3RM, B, ...
DSC4RB, DSX, DSX, DSC4RQ, QDS1R, QDS1R, D56QM, M779032T, D56MC, Y779032T, ...
DSC5RM, B, DSC6RM, SQ4R, SQ4R, D56SQ, QFS2R, QFS2R, D56QM, M779042T, D56MC, ...
X779042T, DSC7RM, B, DSC8RX, DSX, DSX, DQ56SX, QDS2R, QDS2R, D56QM, M779052T, ...
D56MC, Y779052T, DSC9RM, BR, D56BS, DSX, DSX, D56SQ, QFS3R, QFS3R, D56QM, ...
M779062T, D56MC, X779062T, D56CB, B, D56BS, SQ5R, SD2A, SD2A, SQ5R, D56SQ, ...
QDS3R, QDS3R, D56QM, M779072T, D56MC, Y779072T, D56CB, B, D56BS, DSX, DSX, ...
D56SQ, QF, QF, D56QM, M779082T, D56MC, X779082T, D56CB, B, D56BS, DSX, DSX, ...
D56SQ, QD, QD, D56QM];

L000013 = [M779092T, D56MC, Y779092T, D56CB, B, D56BS, DSX, DSX, D56SQ, ...
QF, QF, D56QM, M779102T, D56MC, X779102T, D56CB, B, D56BS, DSX, DSX, D56SQ, ...
QD, QD, D56QM, M779112T, D56MC, Y779112T, D56CB, B, D56BS, DSX, DSX, D56SQ, ...
QF, QF, D56QM, M779122T, D56MC, X779122T, D56CB, B, D56BS, SQ6R, SD2A, ...
SD2A, SQ6R, D56SQ, QD, QD, D56QM, M779132T, D56MC, Y779132T, D56CB, B, D56BS, ...
DSX, DSX, D56SQ, QF, QF, D56QM, M779142T, D56MC, X779142T, D56CB, B, D56BS, ...
DSX, DSX, D56SQ, QD, QD, D56QM, M779152T, D56MC, Y779152T, D56CB, B, D56BS, ...
SF3B, SF3B, D56SQ, QF, QF, D56QM, M779162T, D56MC, X779162T, D56CB, B, ...
D56BS, DSX, DSX, D56SQ, QD, M_ARC, QD, D56QM, M786012T, D56MC, Y786012T, ...
D56CB, B, D56BS, DSX, DSX, D56SQ, QF, QF, D56QM, M786022T, D56MC, X786022T, ...
D56CB, B, D56BS, DSX, DSX, D56SQ, QD, QD, D56QM, M786032T, D56MC, Y786032T, ...
D56CB, B, D56BS, DSX, DSX, D56SQ, QF];

L000014 = [QF, D56QM, M786042T, D56MC, X786042T, D56CB, B, D56BS, DSX, ...
DSX, D56SQ, QD, QD, D56QM, M786052T, D56MC, Y786052T, D56CB, B, D56BS, SF3B, ...
SF3B, D56SQ, QF, QF, D56QM, M786062T, D56MC, X786062T, D56CB, B, D56BS, DSX, ...
DSX, D56SQ, QD, QD, D56QM, M786072T, D56MC, Y786072T, D56CB, B, D56BS, DSX, ...
DSX, D56SQ, QF, QF, D56QM, M786082T, D56MC, X786082T, D56CB, B, D56BS, DSX, ...
DSX, D56SQ, QD, QD, D56QM, M786092T, D56MC, Y786092T, D56CB, B, D56BS, DSX, ...
DSX, D56SQ, QF, QF, D56QM, M786102T, D56MC, X786102T, D56CB, B, D56BS, DSX, ...
DSX, D56SQ, QDS3S, QDS3S, D56QM, M786112T, D56MC, Y786112T, D56CB, B, D56BS, ...
DSX, DSX, D56SQ, QFS3SR03, QFS3SR03, D56QM, M786122T, D56MC, X786122T, D56CB, ...
B, D56BS, DSX, DSX, D56SQ, QDS2SR03, QDS2SR03, D56QM, M786132T, D56MC, ...
Y786132T, D56CB, B, DBQ56, QFS2SR03, QFS2SR03, D56QM, M786142T, D56MC, ...
X786142T, D56CB, B, DBQ56, QDS1SR03, QDS1SR03, D56QM, M786152T, D56MC, ...
Y786152T, D56CB, B, DBQ56, QFS1SR03, QFS1SR03];

L000015 = [D56QM, M786162T, D56MC, X786162T, D56CB, B, DBQ56, QDS0XSR4, ...
QDS0XSR4, D56QM, M787012T, D56MC, Y787012T, DMPH9A, M787022T, D73QM, ...
QFP9R04, QFP9R04, D73QC, X787022T, DSQG2, SQG2, SQG2, DMPH8A, M787032T, ...
D73QM, QDP8R04, QDP8R04, D73QC, Y787032T, DMPH0, M787042T, D73QM, QFP7R04, ...
QFP7R04, D73QC, X787042T, DMPH0, M787052T, D73QM, QDP6R04, QDP6R04, D73QC, ...
Y787052T, DMPH0, M787062T, D73QM, QFP, QFP, D73QC, X787062T, DMPH4, M787072T, ...
D73QM, QDP, QDP, D73QC, Y787072T, DMPH3, DUSQ, DUSQ, DSQG4, M787082T, ...
D73QM, QFP, QFP, D73QC, X787082T, DMPH2, M787092T, D73QM, QDP, QDP, D73QC, ...
Y787092T, D7092, TRANFEEDBCK, D7092B, M787102T, D73QM, QFP, QFP, D73QC, ...
X787102T, DMPHZ, M788012T, D73QM, QDP, M_ST, QDP, D73QC, Y788012T, D8012, ...
TRANFEEDBCK, D8015, VERTDAMPER, VERTDAMPER, D8016, VERTDAMPER, VERTDAMPER, ...
D8016B, M788022T, D73QM, QFP, QFP, D73QC, X788022T, D8025, HORIZDAMPER, ...
HORIZDAMPER, D8026, HORIZDAMPER, HORIZDAMPER, D8026B, M788032T, D73QM, QDP, ...
QDP, D73QC, Y788032T, D8032, TRANFEEDBCK, D8035, LONGDAMPER, LONGDAMPER, ...
D8036, LONGDAMPER, LONGDAMPER, D8036B, M788042T, D73QM, QFP];

L000016 = [QFP, D73QC, X788042T, D8042, PICKUPTUNE, D8042B, CAV1AR04, ...
DCAV1BR04, CAV1BR04, DH04RF1C, M788052T, D73QM, QDP, QDP, D73QC, Y788052T, ...
D8052, PICKUPTUNE, D8052B, M788062T, D73QM, QFP, QFP, D73QC, X788062T, D8062, ...
PICKUPTUNE, D8062B, M788072T, D73QM, QDP6R04, QDP6R04, D73QC, Y788072T, ...
DMPH0, M788082T, D73QM, QFP7R04, QFP7R04, D73QC, X788082T, D8082, PHASERFCA, ...
D8082B, M788092T, D73QM, QDP8R04, QDP8R04, D73QC, Y788092T, DMPH8, M788102T, ...
D73QM, QFP9R04, QFP9R04, D73QC, X788102T, DSK1, SQG1, SQG1, D8105, ...
LONGFEEDBCK, LONGFEEDBCK, D8106, LNGFDBCK, D8106B, QDS0XE, QDS0XE, D56QM, ...
M789012T, D56MC, Y789012T, D56CB, B, DBQ56, QFS1E, QFS1E, D56QM, M789022T, ...
D56MC, X789022T, D56CB, B, DBQ56, QDS1E, QDS1E, D56QM, M789032T, D56MC, ...
Y789032T, D56CB, B, DBQ56, QFS2E, QFS2E, D56QM, M789042T, D56MC, X789042T, ...
D56CB, B, D56BS, SD, SD, D56SQ, QDS2E, QDS2E, D56QM, M789052T, D56MC, ...
Y789052T, D56CB, B, D56BS, SF, SF, D56SQ, QFS3E, QFS3E, D56QM, M789062T, ...
D56MC, X789062T, D56CB, B, D56BS, SD, SD, D56SQ, QDS3E, QDS3E, D56QM, ...
M789072T, D56MC, Y789072T, D56CB, B, D56BS, SF, SF];

L000017 = [D56SQ, QF90, QF90, D56QM, M789082T, D56MC, X789082T, D56CB, ...
B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M789092T, D56MC, Y789092T, D56CB, ...
B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M789102T, D56MC, X789102T, ...
D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M789112T, D56MC, Y789112T, ...
D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M789122T, D56MC, ...
X789122T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M789132T, D56MC, ...
Y789132T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M789142T, ...
D56MC, X789142T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M789152T, ...
D56MC, Y789152T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, ...
M789162T, D56MC, X789162T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, M_ARC, QD90, ...
D56QM, M796012T, D56MC, Y796012T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, ...
QF90, D56QM, M796022T, D56MC, X796022T, D56CB, B, D56BS, SD, SD];

L000018 = [D56SQ, QD90, QD90, D56QM, M796032T, D56MC, Y796032T, D56CB, ...
B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M796042T, D56MC, X796042T, D56CB, ...
B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M796052T, D56MC, Y796052T, ...
D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M796062T, D56MC, X796062T, ...
D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M796072T, D56MC, ...
Y796072T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M796082T, D56MC, ...
X796082T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M796092T, ...
D56MC, Y796092T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M796102T, ...
D56MC, X796102T, D56CB, B, D56BS, SD, SD, D56SQ, QDS3E, QDS3E, D56QM, ...
M796112T, D56MC, Y796112T, D56CB, B, D56BS, SF, SF, D56SQ, QFS3E, QFS3E, ...
D56QM, M796122T, D56MC, X796122T, D56CB, B, D56BS, DSX, DSX, D56SQ, QDS2E, ...
QDS2E, D56QM, M796132T, D56MC, Y796132T, D56CB, B, DBQ56, QFS2E, QFS2E, ...
D56QM, M796142T, D56MC];

L000019 = [X796142T, D56CB, B, DBQ56, QDS1E, QDS1E, D56QM, M796152T, ...
D56MC, Y796152T, D56CB, B, DBQ56, QFS1E, QFS1E, D56QM, M796162T, D56MC, ...
X796162T, D56CB, B, DBQ56, QDS0XE, QDS0XE, D56QM, M797012T, D56MC, Y797012T, ...
DMPH9A, M797022T, D73QM, QFP9R06, QFP9R06, D73QC, X797022T, DSQG2, DUSQ, ...
DUSQ, DMPH8A, M797032T, D73QM, QDP8R06, QDP8R06, D73QC, Y797032T, DMPH0, ...
M797042T, D73QM, QFP7R06, QFP7R06, D73QC, X797042T, DMPH0, M797052T, D73QM, ...
QDP6R06, QDP6R06, D73QC, Y797052T, DMPH0, M797062T, D73QM, QFP, QFP, D73QC, ...
X797062T, DMPH4, M797072T, D73QM, QDP, QDP, D73QC, Y797072T, DMPH3, SQG4, ...
SQG4, DSQG4, M797082T, D73QM, QFP, QFP, D73QC, X797082T, DMPH2, M797092T, ...
D73QM, QDP, QDP, D73QC, Y797092T, DMPH1, M797102T, D73QM, QFP, QFP, D73QC, ...
X797102T, DMPHZ, M798012T, D73QM, QDP, M_ST, QDP, D73QC, Y798012T, DMPHZ, ...
M798022T, D73QM, QFP, QFP, D73QC, X798022T, DMPH1, M798032T, D73QM, QDP, QDP, ...
D73QC, Y798032T, DMPH2, M798042T];

L000020 = [D73QM, QFP, QFP, D73QC, X798042T, DSQG3, SQG3, SQG3, DMPH3A, ...
M798052T, D73QM, QDP, QDP, D73QC, Y798052T, DMPH4, M798062T, D73QM, QFP, ...
QFP, D73QC, X798062T, DDCCT1, IDCCT1, IDCCT1, DDCCT2, IDCCT2, IDCCT2, ...
DDCCT2B, M798072T, D73QM, QDP6R06, QDP6R06, D73QC, Y798072T, DBCM1, ...
BUNCHCURMON, DBCM2, M798082T, D73QM, QFP7R06, QFP7R06, D73QC, X798082T, ...
DBCM1, BUNCHCURMON, DBCM2, M798092T, D73QM, QDP8R06, QDP8R06, D73QC, ...
Y798092T, DPPSSA, PPSSTOPPER, DPPSSB, PPSSTOPPER, DPPSSC, M798102T, D73QM, ...
QFP9R06, QFP9R06, D73QC, X798102T, DSK1, DUSQ, DUSQ, DMPH9, QDS0XE, QDS0XE, ...
D56QM, M799012T, D56MC, Y799012T, D56CB, B, DBQ56, QFS1E, QFS1E, D56QM, ...
M799022T, D56MC, X799022T, D56CB, BA, BBA, SYNCSRC, BBB, DBQ56, QDS1E, QDS1E, ...
D56QM, M799032T, D56MC, Y799032T, D56CB, BA, BCA, SYNCMIR, BCB, DBQ56, ...
QFS2E, QFS2E, D56QM, M799042T, D56MC, X799042T, D56CB, B, D56BS, SD, SD, ...
D56SQ, QDS2E, QDS2E, D56QM, M799052T, D56MC, Y799052T, D56CB, B, D56BS, SF, ...
SF, D56SQ, QFS3E, QFS3E, D56QM, M799062T, D56MC, X799062T, D56CB, B, D56BS, ...
SD, SD, D56SQ, QDS3E, QDS3E, D56QM, M799072T, D56MC];

L000021 = [Y799072T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, ...
M799082T, D56MC, X799082T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, ...
D56QM, M799092T, D56MC, Y799092T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, ...
D56QM, M799102T, D56MC, X799102T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, ...
QD90, D56QM, M799112T, D56MC, Y799112T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, ...
QF90, D56QM, M799122T, D56MC, X799122T, D56CB, B, D56BS, SD, SD, D56SQ, ...
QD90, QD90, D56QM, M799132T, D56MC, Y799132T, D56CB, B, D56BS, SF, SF, D56SQ, ...
QF90, QF90, D56QM, M799142T, D56MC, X799142T, D56CB, B, D56BS, SD, SD, ...
D56SQ, QD90, QD90, D56QM, M799152T, D56MC, Y799152T, D56CB, B, D56BS, SF, SF, ...
D56SQ, QF90, QF90, D56QM, M799162T, D56MC, X799162T, D56CB, BA, BBA, ...
SYNCSRC, BBB, D56BS, SD, SD, D56SQ, QD90, M_ARC, QD90, D56QM, M866012T, ...
D56MC, Y866012T, D56CB, BA, BCA, SYNCMIR, BCB, D56BS, SF, SF, D56SQ, QF90, ...
QF90];

L000022 = [D56QM, M866022T, D56MC, X866022T, D56CB, B, D56BS, SD, SD, ...
D56SQ, QD90, QD90, D56QM, M866032T, D56MC, Y866032T, D56CB, B, D56BS, SF, SF, ...
D56SQ, QF90, QF90, D56QM, M866042T, D56MC, X866042T, D56CB, B, D56BS, SD, ...
SD, D56SQ, QD90, QD90, D56QM, M866052T, D56MC, Y866052T, D56CB, B, D56BS, SF, ...
SF, D56SQ, QF90, QF90, D56QM, M866062T, D56MC, X866062T, D56CB, B, D56BS, ...
SD, SD, D56SQ, QD90, QD90, D56QM, M866072T, D56MC, Y866072T, D56CB, B, D56BS, ...
SF, SF, D56SQ, QF90, QF90, D56QM, M866082T, D56MC, X866082T, D56CB, B, ...
D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M866092T, D56MC, Y866092T, D56CB, B, ...
D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M866102T, D56MC, X866102T, D56CB, ...
B, D56BS, SD, SD, D56SQ, QDS3E, QDS3E, D56QM, M866112T, D56MC, Y866112T, ...
D56CB, B, D56BS, SF, SF, D56SQ, QFS3E, QFS3E, D56QM, M866122T, D56MC, ...
X866122T, D56CB, B, D56BS, DSX, DSX, D56SQ, QDS2E, QDS2E, D56QM, M866132T, ...
D56MC];

L000023 = [Y866132T, D56CB, B, DBQ56, QFS2E, QFS2E, D56QM, M866142T, ...
D56MC, X866142T, D56CB, B, DBQ56, QDS1E, QDS1E, D56QM, M866152T, D56MC, ...
Y866152T, D56CB, B, DBQ56, QFS1E, QFS1E, D56QM, M866162T, D56MC, X866162T, ...
D56CB, B, DBQ56, QDS0XE, QDS0XE, D56QM, M867012T, D56MC, Y867012T, DMRF9, ...
M867022T, D73QM, QFRF9R08, QFRF9R08, D73QC, X867022T, DRFC1A, CAV1AR08, ...
DCAVSEP, CAV1BR08, DRFC1B, M867032T, D73QM, QDRF8R08, QDRF8R08, D73QC, ...
Y867032T, D703208, PHASERFCA, DRFC1X, CAV1CR08, DCAVSEP, CAV1DR08, DRFC1D, ...
M867042T, D73QM, QFRF, QFRF, D73QC, X867042T, DRFC3A, CAV3AR08, DCAVSEP, ...
CAV3BR08, DRFC3B, M867052T, D73QM, QDRF, QDRF, D73QC, Y867052T, DRFC3C, ...
CAV3CR08, DCAVSEP, CAV3DR08, DRFC3D, M867062T, D73QM, QFRF, QFRF, D73QC, ...
X867062T, DRFC5A, CAV5AR08, DCAVSEP, CAV5BR08, DRFC5B, M867072T, D73QM, ...
QDRF4, QDRF4, D73QC, Y867072T, DRFC5C, CAV5CR08, DCAVSEP, CAV5DR08, DRFC5D, ...
M867082T, D73QM, QFRFC, QFRFC, D73QC, X867082T, D73CO, DUOX, DUOX, D73OO, ...
DUOXY, DUOXY, D73OOQ, M867092T, D73QM, QDRFC, QDRFC, D73QC, Y867092T, D73CO, ...
DUOY, DUOY, D73OQ, M867102T, D73QM, QFRFC, QFRFC, D73QC, X867102T];

L000024 = [D73CO, DUOX, DUOX, D73OO, DUOXY, DUOXY, D73OOQ, M868012T, ...
D73QM, QDRFC, M_ST, QDRFC, D73QC, Y868012T, D801208, ABORTBPM, D801208B, ...
DUOY, DUOY, D73OQ, M868022T, D73QM, QFRFC, QFRFC, D73QC, X868022T, D73CO, ...
DUOX, DUOX, D73OO, DUOXY, DUOXY, D73OOQ, M868032T, D73QM, QDRFC, QDRFC, ...
D73QC, Y868032T, D73CO, DUOY, DUOY, D73OQ, M868042T, D73QM, QFRFC, QFRFC, ...
D73QC, X868042T, D804208, ABORTBPM, D804208B, DUSQ, DUSQ, DMRF3S, M868052T, ...
D73QM, QDRF4, QDRF4, D73QC, Y868052T, DMRF0, M868062T, D73QM, QFRF, QFRF, ...
D73QC, X868062T, DMRF0, M868072T, D73QM, QDRF, QDRF, D73QC, Y868072T, DMRF0, ...
M868082T, D73QM, QFRF, QFRF, D73QC, X868082T, DMRF0, M868092T, D73QM, ...
QDRF8R08, QDRF8R08, D73QC, Y868092T, DMRF8, M868102T, D73QM, QFRF9R08, ...
QFRF9R08, D73QC, X868102T, DSK, DUSQ, DUSQ, DMRF9S, D73QM, QDS0XE, QDS0XE, ...
D56QM, M869012T, D56MC, Y869012T, D56CB, B, DBQ56, QFS1E, QFS1E, D56QM, ...
M869022T, D56MC, X869022T, D56CB, B, DBQ56, QDS1E, QDS1E, D56QM, M869032T, ...
D56MC, Y869032T, D56CB, B, DBQ56, QFS2E, QFS2E, D56QM, M869042T, D56MC, ...
X869042T, D56CB, B];

L000025 = [D56BS, SD, SD, D56SQ, QDS2E, QDS2E, D56QM, M869052T, D56MC, ...
Y869052T, D56CB, B, D56BS, SF, SF, D56SQ, QFS3E, QFS3E, D56QM, M869062T, ...
D56MC, X869062T, D56CB, B, D56BS, SD, SD, D56SQ, QDS3E, QDS3E, D56QM, ...
M869072T, D56MC, Y869072T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, ...
M869082T, D56MC, X869082T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, ...
D56QM, M869092T, D56MC, Y869092T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, ...
D56QM, M869102T, D56MC, X869102T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, ...
QD90, D56QM, M869112T, D56MC, Y869112T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, ...
QF90, D56QM, M869122T, D56MC, X869122T, D56CB, B, D56BS, SD, SD, D56SQ, ...
QD90, QD90, D56QM, M869132T, D56MC, Y869132T, D56CB, B, D56BS, SF, SF, D56SQ, ...
QF90, QF90, D56QM, M869142T, D56MC, X869142T, D56CB, B, D56BS, SD, SD, ...
D56SQ, QD90, QD90, D56QM, M869152T, D56MC, Y869152T, D56CB, B, D56BS, SF, SF, ...
D56SQ];

L000026 = [QF90, QF90, D56QM, M869162T, D56MC, X869162T, D56CB, B, ...
D56BS, SD, SD, D56SQ, QD90, M_ARC, QD90, D56QM, M876012T, D56MC, Y876012T, ...
D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M876022T, D56MC, X876022T, ...
D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M876032T, D56MC, ...
Y876032T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M876042T, D56MC, ...
X876042T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, M876052T, ...
D56MC, Y876052T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, M876062T, ...
D56MC, X876062T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, D56QM, ...
M876072T, D56MC, Y876072T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, D56QM, ...
M876082T, D56MC, X876082T, D56CB, B, D56BS, SD, SD, D56SQ, QD90, QD90, ...
D56QM, M876092T, D56MC, Y876092T, D56CB, B, D56BS, SF, SF, D56SQ, QF90, QF90, ...
D56QM, M876102T, D56MC, X876102T, D56CB, B, D56BS, SD, SD, D56SQ];

L000027 = [QDS3E, QDS3E, D56QM, M876112T, D56MC, Y876112T, D56CB, B, ...
D56BS, SF, SF, D56SQ, QFS3E, QFS3E, D56QM, M876122T, D56MC, X876122T, D56CB, ...
B, D56BS, DSX, DSX, D56SQ, QDS2E, QDS2E, D56QM, M876132T, D56MC, Y876132T, ...
D56CB, B, DBQ56, QFS2E, QFS2E, D56QM, M876142T, D56MC, X876142T, D56CB, B, ...
DBQ56, QDS1E, QDS1E, D56QM, M876152T, D56MC, Y876152T, D56CB, B, DBQ56, ...
QFS1E, QFS1E, D56QM, M876162T, D56MC, X876162T, D56CB, B, DBQ56, QDS0E, ...
QDS0E, D56QM, M877012T, D56MC, Y877012T, DM5656A, M877022T, D56SQM, QFOI, ...
QFOI, D56QC, X877022T, DSK, DUSQ, DUSQ, DMOI5B, BM2L, BM2L, DMOI5A, Y877032T, ...
D56QC, QDOI, QDOI, D56SQM, M877032T, DMOI4, BK, BK, DBKABRT1, BKABRT1, ...
BKABRT1, DBKABRT2, BKABRT2, BKABRT2, DOI3S, M877042T, D45QM, QFI, QFI, D45QC, ...
X877042T, DMOI2B, BM1L, BM1L, DOI2AA, BLAM, BLAM, DOI2AB, QDI, QDI, DOI1, ...
DSEP];

RING10S = [L000001,L000002,L000003,L000004,L000005,L000006,L000007, ...
L000008,L000009,L000010,L000011,L000012,L000013,L000014,L000015,L000016, ...
L000017,L000018,L000019,L000020,L000021,L000022,L000023,L000024,L000025, ...
L000026,L000027];


THERING=cell(size(RING10S));
for i=1:length(THERING)
   THERING{i} = FAMLIST{RING10S(i)}.ElemData;
   FAMLIST{RING10S(i)}.NumKids=FAMLIST{RING10S(i)}.NumKids+1;
   FAMLIST{RING10S(i)}.KidsList = [FAMLIST{RING10S(i)}.KidsList i];
end

%% compute total length and RF frequency

L0_tot=0;
for i=1:length(THERING)
   L0_tot=L0_tot+THERING{i}.Length;
end

fprintf('\nL0_tot=%.6f m (should be 2199.317915 m) \nf_RF=%.6f MHz (should be 475.999970046 MHz)\n\n',L0_tot,HarmNumber*C0/L0_tot/1e6)


% esave

% return

%% Compute initial tunes before loading errors
% [InitialTunes, InitialChro]= tunechrom(THERING,0,[24.529, 23.610],'chrom','coupling');
[twissdata, InitialTunes, InitialChro]= twissring(THERING,0,1:length(THERING),'chrom');

fprintf('Tunes and chromaticities are calculated slightly incorrectly since radiation and cavity are on\n');
fprintf('Tunes before loading lattice errors: nu_x=%g, nu_y=%g\n',InitialTunes(1),InitialTunes(2));
fprintf('Chroma before loading lattice errors: xi_x=%g, xi_y=%g\n',InitialChro(1),InitialChro(2));

evalin('caller','global THERING FAMLIST GLOBVAL');
evalin('base','global THERING FAMLIST GLOBVAL');
disp('** Done **');
