% macro match dba test lattice beta functions and dispersion using
% quadrupoles.
clear all
load('dbatest.mat','RING');

%%  VARIABLES
vi=   1;
Variab{vi}=struct('PERTURBINDX',[findcells(RING,'FamName','QD')],...
    'PVALUE',0,...
    'Fam',1,...
    'LowLim',[],...
    'HighLim',[],...
    'FIELD','PolynomB',...
    'IndxInField',{{1,2}}); % the double braces {{}} are necessary in orded 
                            % to avoid the creation of multiple structures.

vi=vi+1;
Variab{vi}=struct('PERTURBINDX',[findcells(RING,'FamName','QF')]...
    ,'PVALUE',0,...
    'Fam',1,...
    'LowLim',[],...
    'HighLim',[],...
    'FIELD','PolynomB',...
    'IndxInField',{{1,2}});

vi=vi+1;
k1start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','QDM'),1,2);

Variab{vi}=struct('FUN',@(RING,K1Val)VaryQuadFam(RING,K1Val,'QDM'),...
    'PVALUE',0,... % starting perturbation value.
    'Fam',1,...
    'StartVALUE',k1start(1),...
    'LowLim',[],...
    'HighLim',[],...
    'FIELD','macro');


% % Alternative to change a quadrupole gradient
% %  %   standard perturbindx variable approach
% vi=vi+1;
% Variab{vi}=struct('PERTURBINDX',[findcells(RING,'FamName','QDM')],...
%     'PVALUE',0,...
%     'Fam',1,...
%     'LowLim',[],...
%     'HighLim',[],...
%     'FIELD','PolynomB',...
%     'IndxInField',{{1,2}});

vi=vi+1;
Variab{vi}=struct('PERTURBINDX',[findcells(RING,'FamName','QFM')],...
    'PVALUE',0,...
    'Fam',1,...
    'LowLim',[],...
    'HighLim',[],...
    'FIELD','PolynomB',...
    'IndxInField',{{1,2}});

vi=vi+1;
Variab{vi}=struct('PERTURBINDX',[findcells(RING,'FamName','QFM')],...
    'PVALUE',0,...
    'Fam',1,...
    'LowLim',[],...
    'HighLim',[],...
    'FIELD','PolynomB',...
    'IndxInField',{{1,2}});

%%  CONSTRAINTS
c_i=1;
qfmindx=findcells(RING,'FamName','QFM');
Constr{c_i}=struct('Fun',@(RING)dispx(RING,1),...
    'Min',0,...
    'Max',0,...
    'Weight',1);

% c_i=1;
% qfmindx=findcells(RING,'FamName','QFM');
% Constr{c_i}=struct('Fun',@(RING)dispx(RING,qfmindx(2)),...
%     'Min',2,...
%     'Max',2,...
%     'Weight',1);

c_i=c_i+1;
Constr{c_i}=struct('Fun',@(RING)betx(RING,qfmindx(2)),...
    'Min',18,...
    'Max',18,...
    'Weight',1);

c_i=c_i+1;
Constr{c_i}=struct('Fun',@(RING)bety(RING,qfmindx(2)),...
    'Min',0.6,...
    'Max',0.6,...
    'Weight',1);

c_i=c_i+1;
Constr{c_i}=struct('Fun',@(RING)mux(RING,length(RING)),...
    'Min',4.3,...
    'Max',4.3,...
    'Weight',1);



%% MATCHING

% Optimization toolbox
RING_matched=atmatch(RING,Variab,Constr,10^-12,1000,'lsqnonlin',1);%

%RING_matched=atmatch(RING,Variab,Constr,10^-12,1000,'fminsearch',1);%

%return

% rf.('Length')=0;
% rf.('HarmNumber')=4;
% rf.('Energy')=0.511e9;
% rf.('PassMethod')='CavityPass';
% cl=299792458;% change to speed of electrons!
% larc=findspos(RING,length(RING)+1);
% rf.('Frequency')=cl/larc*rf.('HarmNumber');
% rf.('Voltage')=0.0047*1e6;
% RING=[{rf};RING]; 
% RING_matched=[{rf};RING_matched]; 
% RING=setcellstruct(RING,'Energy',1:length(RING),0.511e9);
% RING_matched=setcellstruct(RING_matched,'Energy',1:length(RING_matched),0.511e9);
%atplot_nam_str(RING,0.511e9,'ringdbatest',0,0);
%atplot_nam_str(RING_matched,0.511e9,'ringdbatest_rematched',0,0);

figure;atplot(RING);% export_fig('ringdba.pdf','-transparent');
figure;atplot(RING_matched);% export_fig('ringdba_matched.pdf','-transparent');
