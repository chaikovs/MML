function outM = idCreateModelOrbDistMatr(x_or_z, idCellNum, idCenPos, idLen, idKickOfst)

% Creates orbit distortion matrix to simulate the effect of an ID on e-beam

strBPM = strcat('BPM', x_or_z);

sectLenBwBPMs = 2.*3.14155; % Medium-size straight section
indUpstrBPM = 25; % Ask Pascale or Laurent how to calculate this from idCellNum !
indDownstrBPM = indUpstrBPM + 1; % To precise this
%if (idCellNum == 1) || (idCellNum == 3)
%    sectLenBwBPMs = 
%end
ringCircum = 354; % [m]
alpMomCompact = 0.0005; % Ask Laurent or Pascale

[Btx Btz] = modelbeta(strBPM);
[Alpx Alpz] = modeltwiss('alpha', strBPM);
[Etax, Etaz] = modeltwiss('eta', strBPM); % Ask Laurent or Pascale
[Phx Phz] = modelphase(strBPM);
Nuxz = modeltune;

Bt = Btx; Alp = Alpx; Eta = Etax; Ph = Phx; Nu = Nuxz(1);
if strcmp(x_or_z, 'z') ~= 0
	Bt = Btz; Alp = Alpz; Eta = Etaz; Ph = Phz; Nu = Nuxz(2);
end

distUpstrBPM_Kick1 = idCenPos - 0.5*sectLenBwBPMs - 0.5*idLen + idKickOfst;
distUpstrBPM_Kick2 = idCenPos - 0.5*sectLenBwBPMs + 0.5*idLen - idKickOfst;
btUpstr = Bt(indUpstrBPM);
alpUpstr = Alp(indUpstrBPM);
etaUpstr = Eta(indUpstrBPM);
etaDownstr = Eta(indDownstrBPM);
phUpstr = Ph(indUpstrBPM);
phDownstr = Ph(indDownstrBPM);

auxFactQuad = (1 + alpUpstr*alpUpstr)/btUpstr;
twoAlpUpstr = 2*alpUpstr;
btKick1 = btUpstr - distUpstrBPM_Kick1*twoAlpUpstr + distUpstrBPM_Kick1*distUpstrBPM_Kick1*auxFactQuad;
btKick2 = btUpstr - distUpstrBPM_Kick2*twoAlpUpstr + distUpstrBPM_Kick2*distUpstrBPM_Kick2*auxFactQuad;

etaDifBwBPMs = etaDownstr - etaUpstr;
etaKick1 = etaUpstr + (distUpstrBPM_Kick1/sectLenBwBPMs)*etaDifBwBPMs; % Ask Laurent or Pascale
etaKick2 = etaUpstr + (distUpstrBPM_Kick2/sectLenBwBPMs)*etaDifBwBPMs;

phDifBwBPMs = phDownstr - phUpstr;
phKick1 = phUpstr + (distUpstrBPM_Kick1/sectLenBwBPMs)*phDifBwBPMs; % Ask Laurent or Pascale
phKick2 = phUpstr + (distUpstrBPM_Kick2/sectLenBwBPMs)*phDifBwBPMs;

invTwoSinPiNu = 1./(2.*sin(pi*Nu));
invAlpCircum = 1./(alpMomCompact*ringCircum);
numBPMs = size(Btx);
outM = zeros(numBPMs, 2);

for i = 1:numBPMs
    outM(i, 1) = invTwoSinPiNu*sqrt(Bt(i)*btKick1)*cos(abs(Ph(i) - phKick1) - pi*Nu) + invAlpCircum*Eta(i)*etaKick1;
    outM(i, 2) = invTwoSinPiNu*sqrt(Bt(i)*btKick2)*cos(abs(Ph(i) - phKick2) - pi*Nu) + invAlpCircum*Eta(i)*etaKick2;
end
