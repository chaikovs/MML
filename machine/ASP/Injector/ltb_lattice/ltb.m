function ltb(varargin)
% Lattice definition file - generated by dimad2at v1.400000 
% 
% Mark Boland 2006-07-07: Added correctors
%
% ThinCorrectorPass is obsolete. Only use CorrectorPass
%
% TODO

global THERING

GLOBVAL.E0 = 0.1e9;
GLOBVAL.LatticeFile = 'ltb';
FAMLIST = cell(0);

disp(' ');
disp('   ** Loading lattice from ltb.m **');

% d11	=	drift('d11'	,7.325000e-001,'DriftPass');
d11a	=	drift('d11'	,7.325000e-001/2,'DriftPass');
hcor    =   corrector('hcor',0.000000e+000,[0.000000e+000 0.0],'CorrectorPass');
d11b	=	drift('d11'	,7.325000e-001/2,'DriftPass');
q11	=	quadrupole('q11'	,1.500000e-001,9.814461e+000,'QuadLinearPass');
d12	=	drift('d12'	,3.017778e-001,'DriftPass');
q12	=	quadrupole('q12'	,1.500000e-001,-7.465325e+000,'QuadLinearPass');
% d13	=	drift('d13'	,3.023000e-001,'DriftPass');
d13a	=	drift('d13a'	,3.023000e-001/2,'DriftPass');
vcor    =   corrector('vcor',0.000000e+000,[0.000000e+000 0.0],'CorrectorPass');
d13b	=	drift('d13b'	,3.023000e-001/2,'DriftPass');
q13	=	quadrupole('q13'	,1.500000e-001,-2.079986e+000,'QuadLinearPass');
d14	=	drift('d14'	,1.986000e-001,'DriftPass');

b1	=	sbend('b1'	,3.000000e-001,2.620000e-001,1.310000e-001,1.310000e-001,0.000000e+000,'BndMPoleSymplectic4Pass');
FAMLIST{b1}.ElemData.PolynomB(3) = 0.000000e+000;

d21	=	drift('d21'	,6.749000e-001,'DriftPass');
q2	=	quadrupole('q2'	,1.500000e-001,1.571700e+001,'QuadLinearPass');
d22a	=	drift('d22a'	,0.66*6.749000e-001,'DriftPass');
screen1 = marker('screen1','IdentityPass');
d22b	=	drift('d22b'	,(1-0.66)*6.749000e-001,'DriftPass');

d31	=	drift('d31'	,5.000000e-001,'DriftPass');
q31	=	quadrupole('q31'	,1.500000e-001,1.239658e+001,'QuadLinearPass');
d32	=	drift('d32'	,3.000000e-001,'DriftPass');
q32	=	quadrupole('q32'	,1.500000e-001,-7.802708e+000,'QuadLinearPass');
% d33	=	drift('d33'	,2.004400e+000,'DriftPass');
d33a	=	drift('d33a'	,2.004400e+000*0.2,'DriftPass');
vcor    =   corrector('vcor',0.000000e+000,[0.000000e+000 0.0],'CorrectorPass');
d33b	=	drift('d33b'	,0.8*(2.004400e+000*0.8),'DriftPass');
screen2 = marker('screen2','IdentityPass');
d33c    =   drift('d33c'    ,0.2*(2.004400e+000*0.8),'DriftPass');
q33	=	quadrupole('q33'	,1.500000e-001,-1.267034e+001,'QuadLinearPass');
d34	=	drift('d34'	,2.000000e-001,'DriftPass');
q34	=	quadrupole('q34'	,1.500000e-001,1.277480e+001,'QuadLinearPass');
d35	=	drift('d35'	,2.965047e-001,'DriftPass');

b3	=	sbend('b3'	,8.000000e-002,-6.980000e-002,-3.490000e-002,-3.490000e-002,0.000000e+000,'BndMPoleSymplectic4Pass');
FAMLIST{b3}.ElemData.PolynomB(3) = 0.000000e+000;

d41	=	drift('d41'	,1.019048e+000,'DriftPass');
q41	=	quadrupole('q41'	,1.500000e-001,-1.095164e+001,'QuadLinearPass');
d42	=	drift('d42'	,6.281000e-001,'DriftPass');
q42	=	quadrupole('q42'	,1.500000e-001,1.078967e+001,'QuadLinearPass');
% d43	=	drift('d43'	,7.005000e-001,'DriftPass');
d43a    =	drift('d43a'	,7.005000e-001*0.75,'DriftPass');
vcor    =   corrector('vcor',0.000000e+000,[0.000000e+000 0.0],'CorrectorPass');
d43b	=	drift('d43b'	,7.005000e-001*0.25,'DriftPass');
q43	=	quadrupole('q43'	,1.500000e-001,-9.615287e-001,'QuadLinearPass');
% d44	=	drift('d44'	,1.347000e+000,'DriftPass');
d44a	=	drift('d44a'	,1.347000e+000/3,'DriftPass');
d44b1	=	drift('d44b'	,0.5*(1.347000e+000/3),'DriftPass');
screen3 = marker('screen3','IdentityPass');
d44b2	=	drift('d44b'	,0.5*(1.347000e+000/3),'DriftPass');
d44c	=	drift('d44c'	,1.347000e+000/3,'DriftPass');

bsep	=	sbend('bsep'	,1.019674e+000,-1.391376e-001,0.000000e+000,0.000000e+000,0.000000e+000,'BndMPoleSymplectic4Pass');
FAMLIST{bsep}.ElemData.PolynomB(3) = 0.000000e+000;
d51	=	drift('d51'	,5.830000e-001,'DriftPass');
d52	=	drift('d52'	,4.640000e-001,'DriftPass');
bkick	=	sbend('bkick'	,1.084000e+000,-1.808000e-002,0.000000e+000,0.000000e+000,0.000000e+000,'BndMPoleSymplectic4Pass');
FAMLIST{bkick}.ElemData.PolynomB(3) = 0.000000e+000;
enddrift	=	drift('drift'	,1.000000e+000,'DriftPass');
m1	=	marker('m1'	,'IdentityPass');

% Begin declaration of element groups and lattice.
% ltb_old = [ d11 q11 d12 q12 d13 q13 d14 b1 d21 q2 d22 b1 d31 q31 m1 d32 q32 d33 q33 d34 q34 d35 b3 d41 q41 d42 q42 d43 q43 d44 bsep d51 d52 bkick enddrift ];

ltb = [ d11a hcor d11b q11 d12 q12 d13a vcor d13b q13 d14 b1...
    d21 q2 d22a screen1 d22b b1...
    d31 q31 m1 d32 q32 d33a vcor d33b screen2 d33c q33  d34 q34 d35 b3...
    d41 q41 d42 q42 d43a vcor d43b q43 d44a hcor d44b1 screen3 d44b2 vcor d44c...
    bsep d51 d52 bkick enddrift ];


if nargin > 0
    fprintf('   Using lattice : %s \n', varargin{1});
    THERING = eval(['buildlat(' varargin{1} ');']);
else
    % Default lattice to load
    fprintf('   Using default lattice : ltb\n');
    THERING = buildlat(ltb);
end

% Set the energy of the THERING elemnts
THERING = setcellstruct(THERING, 'Energy', 1:length(THERING), GLOBVAL.E0);

% Inital betafunctions to calculate the lattice functions.
TDinit = [10 0 10 0 0 0]';
TDin.ElemIndex = 1;
TDin.SPos = 0;
TDin.ClosedOrbit= zeros(4,1);   % Inital guess and only applies for RING
TDin.M44 = zeros(4,4);          % Inital transfer matrix
betax0 = TDinit(1);
betay0 = TDinit(3);
TDin.beta = [betax0 betay0];
alphax0 = TDinit(2);
alphay0 = TDinit(4);
TDin.alpha = [alphax0 alphay0];
TDin.mu = [0 0];                % Initial phase
TDin.Dispersion = [TDinit(5) 0 TDinit(6) 0]';

THERING{1}.TwissData = TDin;

% Make global variables available in the user workspace.
%evalin('caller','global THERING GLOBVAL');

% New AT 1.3 does not require FAMLIST and is fazing out GLOBVAL
clear global FAMLIST

disp('   ** Done **');